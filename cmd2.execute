(function() {
    const baseUrl = 'https://drmineword.github.io/Artefact-Boost-Active/';

    // Retrieve visit counts and time spent from localStorage (or initialize if empty)
    let visitCounts = JSON.parse(localStorage.getItem('visitCounts')) || [];
    let timeSpentOnPages = JSON.parse(localStorage.getItem('timeSpentOnPages')) || [];
    let totalVisitSummary = JSON.parse(localStorage.getItem('totalVisitSummary')) || {
        totalVisits: 0,
        totalTimeSpent: 0
    };

    // Track the visit time for this page
    const pageVisitStartTime = Date.now();
    const currentSubPath = window.location.pathname;

    // Update the total visits and sub-path visit counts
    totalVisitSummary.totalVisits++;
    const subPathIndex = visitCounts.findIndex(item => item.subPath === currentSubPath);
    if (subPathIndex === -1) {
        // If the current sub-path isn't found, add it
        visitCounts.push({ subPath: currentSubPath, visitCount: 1 });
        timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: 0 });
    } else {
        // If the sub-path is found, increment the visit count
        visitCounts[subPathIndex].visitCount++;
    }

    // Store the updated values back into localStorage
    localStorage.setItem('visitCounts', JSON.stringify(visitCounts));
    localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

    // Function to calculate total time spent across all pages
    function getTotalWebsiteTime() {
        return totalVisitSummary.totalTimeSpent;
    }

    // Calculate and update the total time spent on the current page
    window.addEventListener('beforeunload', () => {
        const pageVisitEndTime = Date.now();
        const pageTimeSpent = pageVisitEndTime - pageVisitStartTime;

        // Update the total time spent on the website
        totalVisitSummary.totalTimeSpent += pageTimeSpent;
        localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

        // Store the time spent on this page
        const pageTimeIndex = timeSpentOnPages.findIndex(item => item.subPath === currentSubPath);
        if (pageTimeIndex === -1) {
            // If the current page is not found, add it
            timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: pageTimeSpent });
        } else {
            // If the page is found, update the time spent
            timeSpentOnPages[pageTimeIndex].timeSpent += pageTimeSpent;
        }

        // Update timeSpentOnPages in localStorage
        localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    });

    // Create a blank space in the console for better readability
    console.log("\n\n");

    // Log the visit statistics with nice formatting
    console.log("=====================================");
    console.log("  ðŸš€ Visit Stats - Artefact Boost  ðŸš€");
    console.log("=====================================");
    console.log(`ðŸ”¹ Total Page Visits: ${totalVisitSummary.totalVisits}`);

    // Log visits for each sub-path
    console.log("ðŸ”¹ Visits to each sub-path:");
    visitCounts.forEach(item => {
        console.log(`   - ${item.subPath}: ${item.visitCount} visit(s)`);
    });

    console.log("=====================================");

    // Log total time spent on the website
    const totalWebsiteTime = getTotalWebsiteTime();
    console.log(`ðŸ•’ Total Time Spent on Website: ${formatTime(totalWebsiteTime)}`);
    
    // Log the time spent on the current page
    const currentPageTime = timeSpentOnPages.find(item => item.subPath === currentSubPath)?.timeSpent || 0;
    console.log(`ðŸ•’ Time Spent on Current Page: ${formatTime(currentPageTime)}`);
    
    console.log("=====================================");

    // Function to format time in a human-readable format (milliseconds to minutes and seconds)
    function formatTime(timeInMilliseconds) {
        const seconds = Math.floor(timeInMilliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes} minute(s) ${remainingSeconds} second(s)`;
    }
})();
