// IIFE to encapsulate the script and prevent global scope pollution
(() => {
  const base64Zip = "${base64}"; // Replace with your actual base64 string

  // Function to dynamically load JSZip
  function loadJSZip() {
    return new Promise((resolve, reject) => {
      const existingScript = document.querySelector('script[src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"]');
      if (existingScript) {
        console.log('JSZip is already loaded.');
        return resolve();
      }

      const script = document.createElement('script');
      script.src = "https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js";
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  // Function to check if the base64 string is a ZIP file
  function isZipFile(base64Data) {
    const binaryString = atob(base64Data.slice(0, 100)); // Decode a portion of the base64 string
    const zipSignature = [80, 75, 3, 4]; // PK\x03\x04
    return zipSignature.every((byte, index) => binaryString.charCodeAt(index) === byte);
  }

  // Function to process ZIP file
  async function processZip(base64Data) {
    console.log('Processing as ZIP file...');

    // Convert base64 to binary
    const binaryString = atob(base64Data);
    const byteArray = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      byteArray[i] = binaryString.charCodeAt(i);
    }

    // Use JSZip to unzip
    const zip = await JSZip.loadAsync(byteArray);

    // Extract font and .txt file
    let fontBlob, txtContent;
    await Promise.all(
      Object.keys(zip.files).map(async (fileName) => {
        if (fileName.endsWith('.ttf') || fileName.endsWith('.woff') || fileName.endsWith('.woff2')) {
          console.log(`Found font file: ${fileName}`);
          fontBlob = await zip.files[fileName].async('blob');
        } else if (fileName.endsWith('.txt')) {
          console.log(`Found text file: ${fileName}`);
          txtContent = await zip.files[fileName].async('string');
        }
      })
    );

    // Print .txt file content
    if (txtContent) {
      console.log('TXT Content:', txtContent);
    } else {
      console.warn('No .txt file found in the ZIP.');
    }

    // Load the font
    if (fontBlob) {
      const fontUrl = URL.createObjectURL(fontBlob);
      const fontFace = new FontFace('DynamicFont', `url(${fontUrl})`);
      document.fonts.add(fontFace);

      // Apply the font to the body
      fontFace.load().then(() => {
        document.body.style.fontFamily = 'DynamicFont, sans-serif';
        console.log('Font loaded and applied successfully.');
      });
    } else {
      console.warn('No font file found in the ZIP.');
    }
  }

  // Function to process a standalone font file
  function processFont(base64Data) {
    console.log('Processing as standalone font file...');

    const binaryString = atob(base64Data);
    const byteArray = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      byteArray[i] = binaryString.charCodeAt(i);
    }

    const fontBlob = new Blob([byteArray]);
    const fontUrl = URL.createObjectURL(fontBlob);
    const fontFace = new FontFace('DynamicFont', `url(${fontUrl})`);
    document.fonts.add(fontFace);

    // Apply the font to the body
    fontFace.load().then(() => {
      document.body.style.fontFamily = 'DynamicFont, sans-serif';
      console.log('Font loaded and applied successfully.');
    });
  }

  // Main function to determine and process the input
  async function processBase64(base64Data) {
    try {
      if (isZipFile(base64Data)) {
        console.log('Detected ZIP file format.');
        await processZip(base64Data);
      } else {
        console.log('Detected standalone font file format.');
        processFont(base64Data);
      }
    } catch (error) {
      console.error('Error during processing:', error);
    }
  }

  // Load JSZip and process the base64 data
  loadJSZip()
    .then(() => {
      console.log('JSZip loaded successfully.');
      processBase64(base64Zip);
    })
    .catch((err) => {
      console.error('Failed to load JSZip:', err);
    })
    .finally(() => {
      console.log('Clearing base64Zip and other variables.');
      // Clear variables to avoid re-declaration issues
      window.base64Zip = undefined;
    });
})();
