{
  "list": [
    {
      "id": "UPLOAD_1735412450_ftrottvw2",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/wingding.ttf_encoded.json",
      "data": {
        "id": "UPLOAD_1735412450_ftrottvw2",
        "type": "application/octet-stream",
        "original_file_format": ".ttf",
        "timestamp": "2024-12-28T19:00:50.834Z",
        "title": "Windings",
        "description": "windings font (Gaster Font From Undertale)"
      }
    },
    {
      "id": "UPLOAD_1735412499_x8fv2i4tr",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/Poppins.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735412499_x8fv2i4tr",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:01:39.299Z",
        "title": "Poppins",
        "description": "https://fonts.google.com/specimen/Poppins"
      }
    },
    {
      "id": "UPLOAD_1735412796_811orxhx9",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/Tinos.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735412796_811orxhx9",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:06:36.902Z",
        "title": "Tinos",
        "description": "https://fonts.google.com/specimen/Tinos"
      }
    },
    {
      "id": "UPLOAD_1735412845_hayw8q61p",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/Orbitron.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735412845_hayw8q61p",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:07:25.141Z",
        "title": "Orbiton",
        "description": "https://fonts.google.com/specimen/Orbitron"
      }
    },
    {
      "id": "UPLOAD_1735412962_y588i4jlr",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/tf2build.ttf_encoded.json",
      "data": {
        "id": "UPLOAD_1735412962_y588i4jlr",
        "type": "application/octet-stream",
        "original_file_format": ".ttf",
        "timestamp": "2024-12-28T19:09:22.474Z",
        "title": "Build",
        "description": "https://www.dafont.com/tf2-build.font"
      }
    },
    {
      "id": "UPLOAD_1735413903_lyrpxneiv",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/main/fonts/remote_upload/Comic_Sans_MS.ttf_encoded.json",
      "data": {
        "id": "UPLOAD_1735413903_lyrpxneiv",
        "type": "application/octet-stream",
        "original_file_format": ".ttf",
        "timestamp": "2024-12-28T19:25:03.499Z",
        "title": "Comic Sans MS",
        "description": "Best font ever"
      }
    },
    {
      "id": "UPLOAD_1735414094_65dk7yrr2",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/main/fonts/remote_upload/Wallpoet.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735414094_65dk7yrr2",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:28:14.609Z",
        "title": "Wallpoet",
        "description": "https://fonts.google.com/specimen/Wallpoet"
      }
    },
    {
      "id": "UPLOAD_1735414617_puu8grglx",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/main/fonts/remote_upload/Playwrite_AU_VIC_Guides.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735414617_puu8grglx",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:36:57.428Z",
        "title": "Playwrite_AU_VIC_Guides",
        "description": "https://fonts.google.com/specimen/Playwrite+AU+VIC+Guides"
      }
    },
    {
      "id": "UPLOAD_1735415208_sbi9u5h7l",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/main/fonts/remote_upload/Libre_Barcode_39.zip_encoded.json",
      "data": {
        "id": "UPLOAD_1735415208_sbi9u5h7l",
        "type": "application/x-zip-compressed",
        "original_file_format": ".zip",
        "timestamp": "2024-12-28T19:46:48.633Z",
        "title": "Libre_Barcode_39",
        "description": "https://fonts.google.com/specimen/Libre+Barcode+39"
      }
    },
    {
      "id": "UPLOAD_1735421549_f60j4p85p",
      "raw_url": "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/main/fonts/remote_upload/Inkling_v2.otf_encoded.json",
      "data": {
        "id": "UPLOAD_1735421549_f60j4p85p",
        "type": "application/octet-stream",
        "original_file_format": ".otf",
        "timestamp": "2024-12-28T21:32:29.800Z",
        "title": "Inkling_v2",
        "description": "A Splatoon Language/Font"
      }
    }
  ],
  "script_array": [
    {
      "type": "zip",
      "console_log": "Loading zip64 to font script",
      "script": "const base64Zip = \"${base64}\"; // Replace with your actual base64 string\r\n\r\n    // Function to load JSZip dynamically\r\n    function loadJSZip() {\r\n      return new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = \"https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js\";\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n        document.head.appendChild(script);\r\n      });\r\n    }\r\n\r\n    // Decode and extract the ZIP\r\n    async function processZip(base64Data) {\r\n      // Convert base64 to binary\r\n      const binaryString = atob(base64Data);\r\n      const byteArray = new Uint8Array(binaryString.length);\r\n      for (let i = 0; i < binaryString.length; i++) {\r\n        byteArray[i] = binaryString.charCodeAt(i);\r\n      }\r\n\r\n      // Use JSZip to unzip\r\n      const zip = await JSZip.loadAsync(byteArray);\r\n\r\n      // Extract font and .txt file\r\n      let fontBlob, txtContent;\r\n      await Promise.all(\r\n        Object.keys(zip.files).map(async (fileName) => {\r\n          if (fileName.endsWith('.ttf') || fileName.endsWith('.woff') || fileName.endsWith('.woff2')) {\r\n            fontBlob = await zip.files[fileName].async('blob');\r\n          } else if (fileName.endsWith('.txt')) {\r\n            txtContent = await zip.files[fileName].async('string');\r\n          }\r\n        })\r\n      );\r\n\r\n      // Print .txt file content\r\n      if (txtContent) {\r\n        console.log('TXT Content:', txtContent);\r\n      } else {\r\n        console.error('No .txt file found in the ZIP.');\r\n      }\r\n\r\n      // Load the font\r\n      if (fontBlob) {\r\n        const fontUrl = URL.createObjectURL(fontBlob);\r\n        const fontFace = new FontFace('DynamicFont', `url(${fontUrl})`);\r\n        document.fonts.add(fontFace);\r\n\r\n        // Apply the font to the body\r\n        fontFace.load().then(() => {\r\n          document.body.style.fontFamily = 'DynamicFont, sans-serif';\r\n          console.log('Font loaded and applied successfully.');\r\n        });\r\n      } else {\r\n        console.error('No font file found in the ZIP.');\r\n      }\r\n    }\r\n\r\n    // Load JSZip and process the ZIP\r\n    loadJSZip()\r\n      .then(() => {\r\n        console.log('JSZip loaded successfully.');\r\n        processZip(base64Zip);\r\n      })\r\n      .catch((err) => {\r\n        console.error('Failed to load JSZip:', err);\r\n      });",
      "base64_var": "${base64}"
    },
    {
      "type": "ttf",
      "console_log": "Loading ttf64 to font script",
      "script": "const base64Font = \"${base64}\";\n\n  // Create a style element\n  var style = document.createElement('style');\n\n  // Embed the base64 encoded font into the @font-face rule\n  style.innerHTML = `\n    @font-face {\n      font-family: 'ComicSansBase64';\n      src: url('data:font/ttf;base64,${base64Font}') format('truetype');\n    }\n    body {\n      font-family: 'ComicSansBase64', sans-serif;\n    }\n  `;\n\n  // Append the style to the document's head\n  document.head.appendChild(style);",
      "base64_var": "${base64}"
    }
  ]
}