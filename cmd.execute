console.log("Hello! The script is executing successfully.");

// Check if the notification container exists, if not, create it dynamically
const notificationContainerId = 'notification-container';
if (!document.getElementById(notificationContainerId)) {
    const container = document.createElement('div');
    container.id = notificationContainerId;
    document.body.appendChild(container);
    console.log('Notification container created dynamically.');
}

const NOTIFICATION_URL = 'https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/openmessage.json';

async function loadNotifications() {
    try {
        console.log("Attempting to fetch notifications from:", NOTIFICATION_URL);
        const response = await fetch(NOTIFICATION_URL);
        console.log('Response Status:', response.status);

        if (!response.ok) {
            console.error(`Error fetching JSON: ${response.status} ${response.statusText}`);
            return;
        }

        const rawText = await response.text();
        console.log('Raw JSON Text:', rawText);

        let data;
        try {
            data = JSON.parse(rawText);
            console.log("Parsed JSON data successfully:", data);
        } catch (parseError) {
            console.warn("JSON parsing failed. Attempting to fix JSON...", parseError);
            data = attemptFixJSON(rawText);
            if (!data) {
                console.error("Failed to parse and fix JSON:", parseError);
                return;
            }
        }

        console.log("Current UNIX Time:", Math.floor(Date.now() / 1000));
        console.log("Fetched Notifications JSON:", data);

        if (!data.data || !Array.isArray(data.data)) {
            console.error("Invalid JSON structure: 'data' property missing or not an array.", data);
            return;
        }

        handleNotifications(data.data);
    } catch (error) {
        console.error('Error fetching notifications:', error);
    }
}

function attemptFixJSON(jsonString) {
    try {
        console.log("Attempting to fix malformed JSON...");
        const fixedString = jsonString
            .replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?\s*:/g, '"$2":')
            .replace(/,\s*}/g, '}')
            .replace(/,\s*]/g, ']')
            .replace(/\s*=\s*/g, ':');

        console.log("Fixed JSON string:", fixedString);

        return JSON.parse(fixedString);
    } catch (fixError) {
        console.error("Failed to fix JSON string:", fixError);
        return null;
    }
}

function handleNotifications(notifications) {
    const currentTime = Math.floor(Date.now() / 1000);
    console.log("Current Time (UNIX):", currentTime);

    const dismissedNotifications = JSON.parse(localStorage.getItem('dismissedNotifications')) || [];
    console.log("Dismissed Notifications:", dismissedNotifications);

    notifications.forEach(notification => {
        console.log("Processing notification:", notification);

        if (!notification.id || !notification["start-show-unix"] || !notification["end-show-unix"] || !notification.colors) {
            console.warn("Skipping invalid notification object:", notification);
            return;
        }

        const startTime = parseInt(notification["start-show-unix"]);
        const endTime = parseInt(notification["end-show-unix"]);

        if (isNaN(startTime) || isNaN(endTime)) {
            console.warn("Skipping notification with invalid time range:", notification);
            return;
        }

        if (
            currentTime >= startTime &&
            currentTime <= endTime &&
            !dismissedNotifications.includes(notification.id)
        ) {
            console.log("Displaying notification:", notification);
            createNotif(notification);
        } else {
            console.log("Skipping notification (outside valid time range or dismissed):", notification);
        }
    });
}

function createNotif(notification) {
    const container = document.getElementById(notificationContainerId);

    // Ensure the container uses flexbox layout (same as before)
    container.style.display = 'flex';
    container.style.flexDirection = 'column';  // Stack notifications vertically
    container.style.alignItems = 'flex-start'; // Optional: left-aligned notifications
    container.style.gap = '10px';  // Optional: space between notifications

    const notificationDiv = document.createElement('div');
    notificationDiv.className = 'notification';
    notificationDiv.style.backgroundColor = notification.colors[0];
    notificationDiv.style.color = notification.colors[1];
    notificationDiv.style.border = '1px solid #ccc';
    notificationDiv.style.padding = '10px';
    notificationDiv.style.margin = '0';  // Remove margin to avoid unnecessary spacing
    notificationDiv.style.borderRadius = '10px';
    notificationDiv.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';
    notificationDiv.style.position = 'absolute'; // Ensure it's positioned absolutely
    notificationDiv.style.top = '0'; // Position at the top of the container (if needed)
    notificationDiv.style.zIndex = '9999';  // Ensure it's always on top of other content
    notificationDiv.innerHTML = notification["html-msg"].replace('<base64=string to decode>', decodeBase64("string to decode"));

    const dismissButton = document.createElement('button');
    dismissButton.textContent = 'Ã—';
    dismissButton.style.position = 'absolute';
    dismissButton.style.top = '5px';
    dismissButton.style.right = '5px';
    dismissButton.style.backgroundColor = 'transparent';
    dismissButton.style.color = '#ffffff';
    dismissButton.style.border = 'none';
    dismissButton.style.fontSize = '20px';
    dismissButton.style.cursor = 'pointer';
    dismissButton.style.padding = '5px';
    dismissButton.onclick = () => dismissNotif(notification.id, notificationDiv);

    notificationDiv.appendChild(dismissButton);

    // Append the notification div to the container
    container.appendChild(notificationDiv);

    console.log("Notification displayed:", notification);
}




function dismissNotif(id, notificationElement) {
    const dismissedNotifications = JSON.parse(localStorage.getItem('dismissedNotifications')) || [];
    dismissedNotifications.push(id);
    localStorage.setItem('dismissedNotifications', JSON.stringify(dismissedNotifications));

    notificationElement.remove();
    console.log("Notification dismissed:", id);
}

function decodeBase64(base64String) {
    try {
        return atob(base64String);
    } catch (error) {
        console.error('Error decoding base64 string:', error);
        return '[Error decoding message]';
    }
}

// Load notifications when the DOM is ready, but ensure it's not blocked if executed externally
if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", function() {
        loadNotifications();
    });
} else {
    loadNotifications();
}
