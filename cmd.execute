console.log("Hello! The script is executing successfully.");

// Check if the notification container exists, if not, create it dynamically
const notificationContainerId = 'notification-container';
if (!document.getElementById(notificationContainerId)) {
    const container = document.createElement('div');
    container.id = notificationContainerId;
    document.body.appendChild(container);
    console.log('Notification container created dynamically.');
}

const NOTIFICATION_URL = 'https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/openmessage.json';

async function loadNotifications() {
    try {
        console.log("Attempting to fetch notifications from:", NOTIFICATION_URL);
        const response = await fetch(NOTIFICATION_URL);
        console.log('Response Status:', response.status);

        if (!response.ok) {
            console.error(`Error fetching JSON: ${response.status} ${response.statusText}`);
            return;
        }

        const rawText = await response.text();
        console.log('Raw JSON Text:', rawText);

        let data;
        try {
            data = JSON.parse(rawText);
            console.log("Parsed JSON data successfully:", data);
        } catch (parseError) {
            console.warn("JSON parsing failed. Attempting to fix JSON...", parseError);
            data = attemptFixJSON(rawText);
            if (!data) {
                console.error("Failed to parse and fix JSON:", parseError);
                return;
            }
        }

        console.log("Current UNIX Time:", Math.floor(Date.now() / 1000));
        console.log("Fetched Notifications JSON:", data);

        if (!data.data || !Array.isArray(data.data)) {
            console.error("Invalid JSON structure: 'data' property missing or not an array.", data);
            return;
        }

        handleNotifications(data.data);
    } catch (error) {
        console.error('Error fetching notifications:', error);
    }
}

function attemptFixJSON(jsonString) {
    try {
        console.log("Attempting to fix malformed JSON...");
        const fixedString = jsonString
            .replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?\s*:/g, '"$2":')
            .replace(/,\s*}/g, '}')
            .replace(/,\s*]/g, ']')
            .replace(/\s*=\s*/g, ':');

        console.log("Fixed JSON string:", fixedString);

        return JSON.parse(fixedString);
    } catch (fixError) {
        console.error("Failed to fix JSON string:", fixError);
        return null;
    }
}

function handleNotifications(notifications) {
    const currentTime = Math.floor(Date.now() / 1000);
    console.log("Current Time (UNIX):", currentTime);

    const dismissedNotifications = JSON.parse(localStorage.getItem('dismissedNotifications')) || [];
    console.log("Dismissed Notifications:", dismissedNotifications);

    notifications.forEach(notification => {
        console.log("Processing notification:", notification);

        // Default type to "normal" if type is null or missing
        const type = notification.type || "normal";

        if (!notification.id || !notification["start-show-unix"] || !notification["end-show-unix"] || !notification.colors) {
            console.warn("Skipping invalid notification object:", notification);
            return;
        }

        const startTime = parseInt(notification["start-show-unix"]);
        const endTime = parseInt(notification["end-show-unix"]);

        if (isNaN(startTime) || isNaN(endTime)) {
            console.warn("Skipping notification with invalid time range:", notification);
            return;
        }

        if (
            currentTime >= startTime &&
            currentTime <= endTime &&
            !dismissedNotifications.includes(notification.id)
        ) {
            console.log("Displaying notification:", notification);
            createNotif(notification, type);
        } else {
            console.log("Skipping notification (outside valid time range or dismissed):", notification);
        }
    });
}

function createNotif(notification, type) {
    const container = document.getElementById(notificationContainerId);

    // Create a unique div for each notification
    const notificationDiv = document.createElement('div');
    notificationDiv.className = 'notification';
    notificationDiv.style.backgroundColor = notification.colors[0];
    notificationDiv.style.color = notification.colors[1];
    notificationDiv.style.border = '1px solid #ccc';
    notificationDiv.style.borderRadius = '10px';
    notificationDiv.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';
    notificationDiv.style.padding = '10px';
    notificationDiv.style.margin = '10px 0';
    notificationDiv.style.position = 'relative'; // Allow positioning of buttons and elements
    notificationDiv.style.zIndex = '9999'; // Make sure the notification stays on top

    // Apply custom content (base64 decode or normal HTML)
    const htmlMessageDiv = document.createElement('div');
    htmlMessageDiv.innerHTML = notification["html-msg"];
    notificationDiv.appendChild(htmlMessageDiv);

    // Handle specific types (normal, cookie, etc.)
    if (type === "cookie") {
        container.style.position = 'fixed'; // Ensure it stays at the bottom
        container.style.bottom = '0';
        container.style.left = '0';
        container.style.right = '0';
        container.style.top = ''; // Remove top positioning for cookie
        container.style.backgroundColor = '#f9f9f9';
        container.style.padding = '15px';
        container.style.boxShadow = '0 -2px 10px rgba(0, 0, 0, 0.2)';

        // Add custom action (e.g., OK or cb)
        const actionDiv = document.createElement('div');
        actionDiv.style.minWidth = '100px';
        actionDiv.style.backgroundColor = '#ffffff';
        actionDiv.style.color = '#000000';
        actionDiv.style.border = '1px solid #ccc';
        actionDiv.style.borderRadius = '5px';
        actionDiv.style.textAlign = 'center';
        actionDiv.style.padding = '5px';
        actionDiv.style.cursor = 'pointer';
        actionDiv.textContent = notification.cb || "OK";
        actionDiv.onclick = () => dismissNotif(notification.id, notificationDiv);

        notificationDiv.style.display = 'flex';
        notificationDiv.style.justifyContent = 'space-between';
        notificationDiv.style.alignItems = 'center';
        notificationDiv.appendChild(actionDiv);
    } else if (type === "perm") {
        console.log("Permanent notification: cannot be dismissed.");
    } else if (type.startsWith("auto:")) {
        const autoDismissTime = parseInt(type.split(":")[1]) || 5;
        setTimeout(() => {
            notificationDiv.remove();
            console.log("Auto-dismissed notification:", notification.id);
        }, autoDismissTime * 1000);
    } else {
        // Normal notifications or other types with dismiss button
        const dismissButton = document.createElement('button');
        dismissButton.textContent = 'Ã—';
        dismissButton.style.position = 'absolute';
        dismissButton.style.top = '5px';
        dismissButton.style.right = '5px';
        dismissButton.style.backgroundColor = 'transparent';
        dismissButton.style.color = '#000000';
        dismissButton.style.border = 'none';
        dismissButton.style.fontSize = '16px';
        dismissButton.style.cursor = 'pointer';
        dismissButton.onclick = () => dismissNotif(notification.id, notificationDiv);
        notificationDiv.appendChild(dismissButton);
    }

    // Append the notification to the container
    container.appendChild(notificationDiv);
    console.log("Notification displayed:", notification);
}

function dismissNotif(id, notificationElement) {
    const dismissedNotifications = JSON.parse(localStorage.getItem('dismissedNotifications')) || [];
    dismissedNotifications.push(id);
    localStorage.setItem('dismissedNotifications', JSON.stringify(dismissedNotifications));

    notificationElement.remove();
    console.log("Notification dismissed:", id);
}

function decodeBase64(base64String) {
    try {
        return atob(base64String);
    } catch (error) {
        console.error('Error decoding base64 string:', error);
        return '[Error decoding message]';
    }
}

// Load notifications when the DOM is ready
if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", function() {
        loadNotifications();
    });
} else {
    loadNotifications();
}
