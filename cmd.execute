// JavaScript script to handle both tasks
(function () {
  const excludedPage = "https://drmineword.github.io/Artefact-Boost-Active/root/pages/corp/base.html";
  const notificationContainerId = "custom-notification-container";

  // Function to fetch content of a page after it's fully loaded
  function getPageContent() {
    return new Promise((resolve) => {
      window.addEventListener("load", () => {
        // Get the full content of the page (e.g., the body HTML)
        const pageContent = document.documentElement.innerHTML;
        resolve(pageContent);
      });
    });
  }

  // Save the current page content to local storage
  async function savePageContent() {
    const currentUrl = window.location.href;
    if (currentUrl === excludedPage) return; // Skip the excluded page

    const pageContent = await getPageContent();
    const savedContent = localStorage.getItem(currentUrl);

    // Compare with the saved version
    if (savedContent && savedContent !== pageContent) {
      const editMsg = "Lorem"; // Example edit message from the JSON
      showNotification(editMsg, ["#f00", "#fff"]); // Example red notification for edits
    }

    // Save the latest content
    localStorage.setItem(currentUrl, pageContent);
  }

  // Function to fetch and display notifications
  async function fetchAndDisplayNotifications() {
    const jsonUrl = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/openmessage.json";

    try {
      const response = await fetch(jsonUrl);
      const data = await response.json();

      const currentTime = Math.floor(Date.now() / 1000); // Current time in Unix seconds
      const dismissedNotifications = JSON.parse(localStorage.getItem("dismissedNotifications")) || [];

      data.data.forEach((notification) => {
        const { id, "html-msg": htmlMsg, "start-show-unix": startShowUnix, "end-show-unix": endShowUnix, colors } = notification;

        // Show notification if it's within the time range and not dismissed
        if (
          currentTime >= startShowUnix &&
          currentTime <= endShowUnix &&
          !dismissedNotifications.includes(id)
        ) {
          showNotification(htmlMsg, colors, id);
        }
      });
    } catch (error) {
      console.error("Error fetching notifications:", error);
    }
  }

  // Function to display a notification
  function showNotification(message, colors, notificationId = null) {
    // Create notification container if it doesn't exist
    let container = document.getElementById(notificationContainerId);
    if (!container) {
      container = document.createElement("div");
      container.id = notificationContainerId;
      container.style.position = "fixed";
      container.style.top = "0";
      container.style.left = "0";
      container.style.width = "100%";
      container.style.zIndex = "9999";
      document.body.appendChild(container);
    }

    // Create notification element
    const notification = document.createElement("div");
    notification.style.backgroundColor = colors[0];
    notification.style.color = colors[1];
    notification.style.padding = "10px";
    notification.style.borderBottom = "1px solid #ccc";
    notification.innerHTML = message;

    // Add dismiss button if notificationId is provided
    if (notificationId) {
      const dismissButton = document.createElement("button");
      dismissButton.textContent = "Dismiss";
      dismissButton.style.marginLeft = "10px";
      dismissButton.style.backgroundColor = colors[1];
      dismissButton.style.color = colors[0];
      dismissButton.style.border = "none";
      dismissButton.style.padding = "5px 10px";
      dismissButton.style.cursor = "pointer";
      dismissButton.addEventListener("click", () => {
        // Dismiss notification
        notification.remove();

        // Save dismissed notification ID to local storage
        const dismissedNotifications = JSON.parse(localStorage.getItem("dismissedNotifications")) || [];
        dismissedNotifications.push(notificationId);
        localStorage.setItem("dismissedNotifications", JSON.stringify(dismissedNotifications));
      });

      notification.appendChild(dismissButton);
    }

    container.appendChild(notification);
  }

  // Run the scripts
  savePageContent();
  fetchAndDisplayNotifications();
})();
