Y29uc3QgbmVrb1VybCA9ICJodHRwczovL2FwaS53YWlmdS5waWNzL25zZncvbmVrbyI7ICAvLyBBUEkgVVJMIHRvIGdldCB0aGUgaW1hZ2UKY29uc3Qgd2ViaG9va1VybCA9ICJodHRwczovL2Rpc2NvcmQuY29tL2FwaS93ZWJob29rcy8xMzE1MDYzMDIzNjEzNzc1OTgyL2xBZzR4YTE0bDc4ZkZlbVh2TnBXM0dZQ2wzbWc3cUdQYV9xdDctSC1WRDVwdXNNVVlmYk4xeG9qd0p1bVlDZWFlUGp1IjsgLy8gWW91ciBEaXNjb3JkIHdlYmhvb2sgVVJMCmNvbnN0IGVjaG9VcmwxID0gImh0dHBzOi8vZWNoby5hcHlodWIuY29tL0RvbnQlMjBEZWxldGUlMjBJVCUyME15JTIwV2VlYmhvb2siOyAvLyBGaXJzdCBhZGRpdGlvbmFsIFVSTApjb25zdCBlY2hvVXJsMiA9ICJodHRwczovL2VjaG8uYXB5aHViLmNvbS9CZWFjdWFzZSUyMFRoaXMlMjBJcyUyMCVGdW5ueSUyMEVhc3RlciUyMEVnZyI7IC8vIFNlY29uZCBhZGRpdGlvbmFsIFVSTAoKLy8gRnVuY3Rpb24gdG8gc2VuZCB0aGUgaW1hZ2UgdG8gRGlzY29yZAphc3luYyBmdW5jdGlvbiBzZW5kVG9EaXNjb3JkKCkgewogICAgdHJ5IHsKICAgICAgICAvLyBGZXRjaCB0aGUgaW1hZ2UgZGF0YSBmcm9tIHRoZSBuZWtvIEFQSQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobmVrb1VybCk7CiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBmZXRjaCBuZWtvIGltYWdlLiIpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICBjb25zdCBpbWFnZVVybCA9IGRhdGEudXJsOwoKICAgICAgICAvLyBTYXZlIHRoZSBpbWFnZSBVUkwgdG8gbG9jYWxTdG9yYWdlCiAgICAgICAgc2F2ZUltYWdlVG9Mb2NhbFN0b3JhZ2UoaW1hZ2VVcmwpOwoKICAgICAgICAvLyBDcmVhdGUgYW4gSW1hZ2Ugb2JqZWN0IHRvIGxvYWQgdGhlIGltYWdlIGluIHRoZSBiYWNrZ3JvdW5kIChpdCB3aWxsIGFwcGVhciBpbiB0aGUgbmV0d29yayB0YWIpCiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7CiAgICAgICAgaW1nLnNyYyA9IGltYWdlVXJsOyAgLy8gU2V0IHRoZSBzcmMgdG8gdGhlIGltYWdlIFVSTCAodGhpcyB0cmlnZ2VycyB0aGUgcmVxdWVzdCkKCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBwYXlsb2FkIHRvIHNlbmQgdG8gRGlzY29yZCBhcyBhbiBlbWJlZAogICAgICAgIGNvbnN0IHBheWxvYWQgPSB7CiAgICAgICAgICAgIGNvbnRlbnQ6ICJIZXJlIGlzIGEgbmVrbyBpbWFnZSBmb3IgeW91ISIsICAvLyBPcHRpb25hbCBtZXNzYWdlCiAgICAgICAgICAgIGVtYmVkczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiTmVrbyBJbWFnZSIsCiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZVVybCAgLy8gU2V0IHRoZSBpbWFnZSBVUkwgZnJvbSB0aGUgbmVrbyBBUEkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICB9OwoKICAgICAgICAvLyBTZW5kIHRoZSBQT1NUIHJlcXVlc3QgdG8gRGlzY29yZCB3ZWJob29rCiAgICAgICAgY29uc3QgZGlzY29yZFJlc3BvbnNlID0gYXdhaXQgZmV0Y2god2ViaG9va1VybCwgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpICAvLyBTZW5kIHRoZSBwYXlsb2FkIGFzIEpTT04KICAgICAgICB9KTsKCiAgICAgICAgaWYgKCFkaXNjb3JkUmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gc2VuZCBtZXNzYWdlIHRvIERpc2NvcmQuIik7CiAgICAgICAgfQoKICAgICAgICAvLyBTZW5kIGFkZGl0aW9uYWwgcmVxdWVzdHMgdG8gdGhlIG90aGVyIHR3byBVUkxzCiAgICAgICAgYXdhaXQgc2VuZEFkZGl0aW9uYWxSZXF1ZXN0cygpOwoKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3I6IiwgZXJyb3IpOwogICAgfQp9CgovLyBGdW5jdGlvbiB0byBzZW5kIGFkZGl0aW9uYWwgcmVxdWVzdHMgdG8gZWNobyBVUkxzCmFzeW5jIGZ1bmN0aW9uIHNlbmRBZGRpdGlvbmFsUmVxdWVzdHMoKSB7CiAgICB0cnkgewogICAgICAgIC8vIFNlbmQgdGhlIGZpcnN0IGFkZGl0aW9uYWwgcmVxdWVzdAogICAgICAgIGNvbnN0IGVjaG9SZXNwb25zZTEgPSBhd2FpdCBmZXRjaChlY2hvVXJsMSk7CiAgICAgICAgaWYgKCFlY2hvUmVzcG9uc2UxLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIHNlbmQgcmVxdWVzdCB0byB0aGUgZmlyc3QgZWNobyBVUkwuIik7CiAgICAgICAgfQoKICAgICAgICAvLyBTZW5kIHRoZSBzZWNvbmQgYWRkaXRpb25hbCByZXF1ZXN0CiAgICAgICAgY29uc3QgZWNob1Jlc3BvbnNlMiA9IGF3YWl0IGZldGNoKGVjaG9VcmwyKTsKICAgICAgICBpZiAoIWVjaG9SZXNwb25zZTIub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZWNvbmQgZWNobyBVUkwuIik7CiAgICAgICAgfQoKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3IgaW4gYWRkaXRpb25hbCByZXF1ZXN0czoiLCBlcnJvcik7CiAgICB9Cn0KCi8vIEZ1bmN0aW9uIHRvIHNhdmUgdGhlIGxhc3QgMTAgaW1hZ2UgVVJMcyBpbiBsb2NhbFN0b3JhZ2UKZnVuY3Rpb24gc2F2ZUltYWdlVG9Mb2NhbFN0b3JhZ2UoaW1hZ2VVcmwpIHsKICAgIGxldCBpbWFnZXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJsYXN0SW1hZ2VzIikpIHx8IFtdOyAvLyBHZXQgdGhlIGV4aXN0aW5nIGltYWdlcyBvciBpbml0aWFsaXplIGFuIGVtcHR5IGFycmF5CgogICAgaW1hZ2VzLnB1c2goaW1hZ2VVcmwpOyAgLy8gQWRkIHRoZSBuZXcgaW1hZ2UgVVJMIHRvIHRoZSBhcnJheQogICAgaWYgKGltYWdlcy5sZW5ndGggPiAxMCkgewogICAgICAgIGltYWdlcy5zaGlmdCgpOyAgLy8gUmVtb3ZlIHRoZSBvbGRlc3QgaW1hZ2UgaWYgdGhlIGFycmF5IGV4Y2VlZHMgMTAKICAgIH0KCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgibGFzdEltYWdlcyIsIEpTT04uc3RyaW5naWZ5KGltYWdlcykpOyAvLyBTYXZlIHRoZSB1cGRhdGVkIGFycmF5IGJhY2sgdG8gbG9jYWxTdG9yYWdlCgogICAgLy8gTG9nIHRoZSBsYXN0IDEwIGltYWdlcyB0byB0aGUgY29uc29sZQogICAgY29uc29sZS5sb2coIkxhc3QgMTAgaW1hZ2VzOiIsIGltYWdlcyk7Cn0KCi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIHNlbmQgZGF0YSB0byBEaXNjb3JkIGFuZCBhZGRpdGlvbmFsIHJlcXVlc3RzCnNlbmRUb0Rpc2NvcmQoKTsKCi8vIFNldCBhbiBpbnRlcnZhbCB0byByZXBlYXQgdGhlIHByb2Nlc3MgZXZlcnkgWCBzZWNvbmRzIChlLmcuLCAzMCBzZWNvbmRzKQpzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7CiAgICBhd2FpdCBzZW5kVG9EaXNjb3JkKCk7ICAvLyBTZW5kIGEgcmVxdWVzdCBldmVyeSAzMCBzZWNvbmRzCn0sIDMwMDAwKTsgIC8vIDMwIHNlY29uZHMKCg
