Y29uc3QgY2F0ZWdvcmllcyA9IFsibmVrbyIsICJ3YWlmdSIsICJtZWd1bWluIiwgInNoaW5vYnUiXTsgLy8gQ2F0ZWdvcmllcyB0byBjaG9vc2UgZnJvbQpjb25zdCB3ZWJob29rVXJsID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzMTUwNjMwMjM2MTM3NzU5ODIvbEFnNHhhMTRsNzhmRmVtWHZOcFczR1lDbDNtZzdxR1BhX3F0Ny1ILVZENXB1c01VWWZiTjF4b2p3SnVtWUNlYWVQanU_d2FpdD0xIjsgLy8gWW91ciBEaXNjb3JkIHdlYmhvb2sgVVJMCmNvbnN0IHRocmVhZElkID0gIjEzMTU5Njc4MDc5NzU4NTAwMDQiOyAvLyBUaHJlYWQgSUQgdG8gc2VuZCB0aGUgd2ViaG9vayBtZXNzYWdlIHRvCmNvbnN0IGVjaG9VcmwxID0gImh0dHBzOi8vZWNoby5hcHlodWIuY29tL0RvbnQlMjBEZWxldGUlMjBJVCUyME15JTIwV2VlYmhvb2siOyAvLyBGaXJzdCBhZGRpdGlvbmFsIFVSTApjb25zdCBlY2hvVXJsMiA9ICJodHRwczovL2VjaG8uYXB5aHViLmNvbS9CZWFjdWFzZSUyMFRoaXMlMjBJcyUyMCVGdW5ueSUyMEVhc3RlciUyMEVnZyI7IC8vIFNlY29uZCBhZGRpdGlvbmFsIFVSTAoKLy8gRnVuY3Rpb24gdG8gZ2V0IGEgcmFuZG9tIGNhdGVnb3J5IGZyb20gdGhlIGxpc3QKZnVuY3Rpb24gZ2V0UmFuZG9tQ2F0ZWdvcnkoKSB7CiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhdGVnb3JpZXMubGVuZ3RoKTsKICAgIHJldHVybiBjYXRlZ29yaWVzW3JhbmRvbUluZGV4XTsKfQoKLy8gRnVuY3Rpb24gdG8gc2VuZCB0aGUgaW1hZ2UgdG8gRGlzY29yZAphc3luYyBmdW5jdGlvbiBzZW5kVG9EaXNjb3JkKCkgewogICAgdHJ5IHsKICAgICAgICAvLyBTZWxlY3QgYSByYW5kb20gY2F0ZWdvcnkgKG5la28sIHdhaWZ1LCBtZWd1bWluLCBvciBzaGlub2J1KQogICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gZ2V0UmFuZG9tQ2F0ZWdvcnkoKTsKICAgICAgICBjb25zdCBuZWtvVXJsID0gYGh0dHBzOi8vYXBpLndhaWZ1LnBpY3Mvc2Z3LyR7Y2F0ZWdvcnl9YDsgIC8vIEFQSSBVUkwgYmFzZWQgb24gc2VsZWN0ZWQgY2F0ZWdvcnkKCiAgICAgICAgLy8gRmV0Y2ggdGhlIGltYWdlIGRhdGEgZnJvbSB0aGUgc2VsZWN0ZWQgY2F0ZWdvcnkncyBBUEkKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKG5la29VcmwpOwogICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gZmV0Y2ggaW1hZ2UuIik7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgICAgIGNvbnN0IGltYWdlVXJsID0gZGF0YS51cmw7CgogICAgICAgIC8vIFNhdmUgdGhlIGltYWdlIFVSTCB0byBsb2NhbFN0b3JhZ2UKICAgICAgICBzYXZlSW1hZ2VUb0xvY2FsU3RvcmFnZShpbWFnZVVybCk7CgogICAgICAgIC8vIFVwZGF0ZSB0aGUgd2VicGFnZSdzIGJhY2tncm91bmQgaW1hZ2UKICAgICAgICBzZXRCYWNrZ3JvdW5kSW1hZ2UoaW1hZ2VVcmwpOwoKICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIHBheWxvYWQgdG8gc2VuZCB0byBEaXNjb3JkIGFzIGFuIGVtYmVkCiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsKICAgICAgICAgICAgY29udGVudDogYEhlcmUgaXMgYSByYW5kb20gJHtjYXRlZ29yeX0gaW1hZ2UgZm9yIHlvdSFgLCAgLy8gT3B0aW9uYWwgbWVzc2FnZQogICAgICAgICAgICBlbWJlZHM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogYCR7Y2F0ZWdvcnkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYXRlZ29yeS5zbGljZSgxKX0gSW1hZ2VgLAogICAgICAgICAgICAgICAgICAgIGltYWdlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaW1hZ2VVcmwgIC8vIFNldCB0aGUgaW1hZ2UgVVJMIGZyb20gdGhlIEFQSQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgIH07CgogICAgICAgIC8vIFNlbmQgdGhlIFBPU1QgcmVxdWVzdCB0byBEaXNjb3JkIHdlYmhvb2sgd2l0aCB0aGUgdGhyZWFkIElECiAgICAgICAgY29uc3QgZGlzY29yZFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7d2ViaG9va1VybH0mdGhyZWFkX2lkPSR7dGhyZWFkSWR9YCwgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpICAvLyBTZW5kIHRoZSBwYXlsb2FkIGFzIEpTT04KICAgICAgICB9KTsKCiAgICAgICAgaWYgKCFkaXNjb3JkUmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gc2VuZCBtZXNzYWdlIHRvIERpc2NvcmQuIik7CiAgICAgICAgfQoKICAgICAgICAvLyBTZW5kIGFkZGl0aW9uYWwgcmVxdWVzdHMgdG8gdGhlIG90aGVyIHR3byBVUkxzCiAgICAgICAgYXdhaXQgc2VuZEFkZGl0aW9uYWxSZXF1ZXN0cygpOwoKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3I6IiwgZXJyb3IpOwogICAgfQp9CgovLyBGdW5jdGlvbiB0byBzZW5kIGFkZGl0aW9uYWwgcmVxdWVzdHMgdG8gZWNobyBVUkxzCmFzeW5jIGZ1bmN0aW9uIHNlbmRBZGRpdGlvbmFsUmVxdWVzdHMoKSB7CiAgICB0cnkgewogICAgICAgIC8vIFNlbmQgdGhlIGZpcnN0IGFkZGl0aW9uYWwgcmVxdWVzdAogICAgICAgIGNvbnN0IGVjaG9SZXNwb25zZTEgPSBhd2FpdCBmZXRjaChlY2hvVXJsMSk7CiAgICAgICAgaWYgKCFlY2hvUmVzcG9uc2UxLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIHNlbmQgcmVxdWVzdCB0byB0aGUgZmlyc3QgZWNobyBVUkwuIik7CiAgICAgICAgfQoKICAgICAgICAvLyBTZW5kIHRoZSBzZWNvbmQgYWRkaXRpb25hbCByZXF1ZXN0CiAgICAgICAgY29uc3QgZWNob1Jlc3BvbnNlMiA9IGF3YWl0IGZldGNoKGVjaG9VcmwyKTsKICAgICAgICBpZiAoIWVjaG9SZXNwb25zZTIub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZWNvbmQgZWNobyBVUkwuIik7CiAgICAgICAgfQoKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3IgaW4gYWRkaXRpb25hbCByZXF1ZXN0czoiLCBlcnJvcik7CiAgICB9Cn0KCi8vIEZ1bmN0aW9uIHRvIHNhdmUgdGhlIGxhc3QgMTAgaW1hZ2UgVVJMcyBpbiBsb2NhbFN0b3JhZ2UKZnVuY3Rpb24gc2F2ZUltYWdlVG9Mb2NhbFN0b3JhZ2UoaW1hZ2VVcmwpIHsKICAgIGxldCBpbWFnZXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJsYXN0SW1hZ2VzIikpIHx8IFtdOyAvLyBHZXQgdGhlIGV4aXN0aW5nIGltYWdlcyBvciBpbml0aWFsaXplIGFuIGVtcHR5IGFycmF5CgogICAgaW1hZ2VzLnB1c2goaW1hZ2VVcmwpOyAgLy8gQWRkIHRoZSBuZXcgaW1hZ2UgVVJMIHRvIHRoZSBhcnJheQogICAgaWYgKGltYWdlcy5sZW5ndGggPiAxMCkgewogICAgICAgIGltYWdlcy5zaGlmdCgpOyAgLy8gUmVtb3ZlIHRoZSBvbGRlc3QgaW1hZ2UgaWYgdGhlIGFycmF5IGV4Y2VlZHMgMTAKICAgIH0KCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgibGFzdEltYWdlcyIsIEpTT04uc3RyaW5naWZ5KGltYWdlcykpOyAvLyBTYXZlIHRoZSB1cGRhdGVkIGFycmF5IGJhY2sgdG8gbG9jYWxTdG9yYWdlCgogICAgLy8gTG9nIHRoZSBsYXN0IDEwIGltYWdlcyB0byB0aGUgY29uc29sZQogICAgY29uc29sZS5sb2coIkxhc3QgMTAgaW1hZ2VzOiIsIGltYWdlcyk7Cn0KCi8vIEZ1bmN0aW9uIHRvIHNldCB0aGUgYmFja2dyb3VuZCBpbWFnZSBvZiB0aGUgd2VicGFnZQpmdW5jdGlvbiBzZXRCYWNrZ3JvdW5kSW1hZ2UoaW1hZ2VVcmwpIHsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke2ltYWdlVXJsfSlgOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9ICJjb3ZlciI7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSAibm8tcmVwZWF0IjsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEF0dGFjaG1lbnQgPSAiZml4ZWQiOwp9CgovLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBzZW5kIGRhdGEgdG8gRGlzY29yZCBhbmQgYWRkaXRpb25hbCByZXF1ZXN0cwpzZW5kVG9EaXNjb3JkKCk7CgovLyBTZXQgYW4gaW50ZXJ2YWwgdG8gcmVwZWF0IHRoZSBwcm9jZXNzIGV2ZXJ5IDEwIHNlY29uZHMKc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4gewogICAgYXdhaXQgc2VuZFRvRGlzY29yZCgpOyAgLy8gU2VuZCBhIHJlcXVlc3QgZXZlcnkgMTAgc2Vjb25kcwp9LCAxMDAwMCk7IC8vIDEwIHNlY29uZHM
