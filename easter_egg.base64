KGZ1bmN0aW9uKCkgewogICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgY3JlYXRlIGFuZCBhcHBlbmQgY2FudmFzIHRvIGJvZHkKICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgY2FudmFzLmlkID0gImNhbnZhcyI7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpOwoKICAgICAgICAvLyBFbnN1cmUgY2FudmFzIGNvdmVycyB0aGUgZW50aXJlIGRvY3VtZW50IGxpa2UgYSBiYWNrZ3JvdW5kCiAgICAgICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gImZpeGVkIjsKICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gIjAiOwogICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gIjAiOwogICAgICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAiLTEiOwogICAgICAgIGNhbnZhcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOwogICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gIjEwMCUiOwoKICAgICAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7CiAgICAgICAgfTsKICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lOwoKICAgICAgICB2YXIgZmxha2VzID0gW10sCiAgICAgICAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpLAogICAgICAgICAgICBmbGFrZUNvdW50ID0gNDAwLAogICAgICAgICAgICBtWCA9IC0xMDAsCiAgICAgICAgICAgIG1ZID0gLTEwMDsKCiAgICAgICAgZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkgewogICAgICAgICAgICAvLyBVcGRhdGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggdGhlIHZpZXdwb3J0CiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOwogICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0OwogICAgICAgIH0KCiAgICAgICAgcmVzaXplQ2FudmFzKCk7CgogICAgICAgIGZ1bmN0aW9uIHNub3coKSB7CiAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTsKCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmxha2VDb3VudDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZmxha2UgPSBmbGFrZXNbaV0sCiAgICAgICAgICAgICAgICAgICAgeCA9IG1YLAogICAgICAgICAgICAgICAgICAgIHkgPSBtWSwKICAgICAgICAgICAgICAgICAgICBtaW5EaXN0ID0gMTUwLAogICAgICAgICAgICAgICAgICAgIHgyID0gZmxha2UueCwKICAgICAgICAgICAgICAgICAgICB5MiA9IGZsYWtlLnk7CgogICAgICAgICAgICAgICAgdmFyIGRpc3QgPSBNYXRoLnNxcnQoKHgyIC0geCkgKiAoeDIgLSB4KSArICh5MiAtIHkpICogKHkyIC0geSkpLAogICAgICAgICAgICAgICAgICAgIGR4ID0geDIgLSB4LAogICAgICAgICAgICAgICAgICAgIGR5ID0geTIgLSB5OwoKICAgICAgICAgICAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBmb3JjZSA9IG1pbkRpc3QgLyAoZGlzdCAqIGRpc3QpLAogICAgICAgICAgICAgICAgICAgICAgICB4Y29tcCA9ICh4IC0geDIpIC8gZGlzdCwKICAgICAgICAgICAgICAgICAgICAgICAgeWNvbXAgPSAoeSAtIHkyKSAvIGRpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhViA9IGZvcmNlIC8gMjsKCiAgICAgICAgICAgICAgICAgICAgZmxha2UudmVsWCAtPSBkZWx0YVYgKiB4Y29tcDsKICAgICAgICAgICAgICAgICAgICBmbGFrZS52ZWxZIC09IGRlbHRhViAqIHljb21wOwoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmxha2UudmVsWCAqPSAuOTg7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWtlLnZlbFkgPD0gZmxha2Uuc3BlZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmxha2UudmVsWSA9IGZsYWtlLnNwZWVkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmbGFrZS52ZWxYICs9IE1hdGguY29zKGZsYWtlLnN0ZXAgKz0gLjA1KSAqIGZsYWtlLnN0ZXBTaXplOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAicmdiYSgyNTUsMjU1LDI1NSwiICsgZmxha2Uub3BhY2l0eSArICIpIjsKICAgICAgICAgICAgICAgIGZsYWtlLnkgKz0gZmxha2UudmVsWTsKICAgICAgICAgICAgICAgIGZsYWtlLnggKz0gZmxha2UudmVsWDsKCiAgICAgICAgICAgICAgICBpZiAoZmxha2UueSA-PSBjYW52YXMuaGVpZ2h0IHx8IGZsYWtlLnkgPD0gMCkgewogICAgICAgICAgICAgICAgICAgIHJlc2V0KGZsYWtlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZmxha2UueCA-PSBjYW52YXMud2lkdGggfHwgZmxha2UueCA8PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzZXQoZmxha2UpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgICAgICAgICAgIGN0eC5hcmMoZmxha2UueCwgZmxha2UueSwgZmxha2Uuc2l6ZSwgMCwgTWF0aC5QSSAqIDIpOwogICAgICAgICAgICAgICAgY3R4LmZpbGwoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc25vdyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZXNldChmbGFrZSkgewogICAgICAgICAgICBmbGFrZS54ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoKTsKICAgICAgICAgICAgZmxha2UueSA9IDA7CiAgICAgICAgICAgIGZsYWtlLnNpemUgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjsKICAgICAgICAgICAgZmxha2Uuc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDEpICsgMC41OwogICAgICAgICAgICBmbGFrZS52ZWxZID0gZmxha2Uuc3BlZWQ7CiAgICAgICAgICAgIGZsYWtlLnZlbFggPSAwOwogICAgICAgICAgICBmbGFrZS5vcGFjaXR5ID0gKE1hdGgucmFuZG9tKCkgKiAwLjUpICsgMC4zOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbGFrZUNvdW50OyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoKSwKICAgICAgICAgICAgICAgICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCksCiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IChNYXRoLnJhbmRvbSgpICogMykgKyAyLAogICAgICAgICAgICAgICAgICAgIHNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAxKSArIDAuNSwKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5ID0gKE1hdGgucmFuZG9tKCkgKiAwLjUpICsgMC4zOwoKICAgICAgICAgICAgICAgIGZsYWtlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBzcGVlZDogc3BlZWQsCiAgICAgICAgICAgICAgICAgICAgdmVsWTogc3BlZWQsCiAgICAgICAgICAgICAgICAgICAgdmVsWDogMCwKICAgICAgICAgICAgICAgICAgICB4OiB4LAogICAgICAgICAgICAgICAgICAgIHk6IHksCiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2l6ZSwKICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogKE1hdGgucmFuZG9tKCkpIC8gMzAsCiAgICAgICAgICAgICAgICAgICAgc3RlcDogMCwKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc25vdygpOwogICAgICAgIH0KCiAgICAgICAgLy8gVXBkYXRlIGNhbnZhcyBzaXplIG9uIHdpbmRvdyByZXNpemUKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgcmVzaXplQ2FudmFzKTsKCiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgbVggPSBlLmNsaWVudFg7CiAgICAgICAgICAgIG1ZID0gZS5jbGllbnRZOwogICAgICAgIH0pOwoKICAgICAgICBpbml0KCk7CiAgICB9KSgpOw
