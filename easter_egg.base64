const nekoUrl = "https://api.waifu.pics/sfw/neko";  // API URL to get the image
const webhookUrl = "https://discord.com/api/webhooks/1315063023613775982/lAg4xa14l78fFemXvNpW3GYCl3mg7qGPa_qt7-H-VD5pusMUYfbN1xojwJumYCeaePju"; // Your Discord webhook URL
const echoUrl1 = "https://echo.apyhub.com/Dont%20Delete%20IT%20My%20Weebhook"; // First additional URL
const echoUrl2 = "https://echo.apyhub.com/Beacuase%20This%20Is%20%Funny%20Easter%20Egg"; // Second additional URL

// Function to send the image to Discord
async function sendToDiscord() {
    try {
        // Fetch the image data from the neko API
        const response = await fetch(nekoUrl);
        if (!response.ok) {
            throw new Error("Failed to fetch neko image.");
        }

        const data = await response.json();
        const imageUrl = data.url;

        // Save the image URL to localStorage
        saveImageToLocalStorage(imageUrl);

        // Create an Image object to load the image in the background (it will appear in the network tab)
        const img = new Image();
        img.src = imageUrl;  // Set the src to the image URL (this triggers the request)

        // Optionally, log the URL or any other relevant data
        console.log("Image URL is now requested:", imageUrl);

        // You can add an onload event listener to confirm the image was requested
        img.onload = function() {
            console.log("Image loaded successfully in the background.");
        };

        // Construct the payload to send to Discord as an embed
        const payload = {
            content: "Here is a neko image for you!",  // Optional message
            embeds: [
                {
                    title: "Neko Image",
                    image: {
                        url: imageUrl  // Set the image URL from the neko API
                    }
                }
            ]
        };

        // Send the POST request to Discord webhook
        const discordResponse = await fetch(webhookUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)  // Send the payload as JSON
        });

        if (discordResponse.ok) {
            console.log("Message sent to Discord successfully.");
        } else {
            throw new Error("Failed to send message to Discord.");
        }

        // Send additional requests to the other two URLs
        await sendAdditionalRequests();

    } catch (error) {
        console.error("Error:", error);
    }
}

// Function to send additional requests to echo URLs
async function sendAdditionalRequests() {
    try {
        // Send the first additional request
        const echoResponse1 = await fetch(echoUrl1);
        if (echoResponse1.ok) {
            console.log("Request to first echo URL successful.");
        } else {
            throw new Error("Failed to send request to the first echo URL.");
        }

        // Send the second additional request
        const echoResponse2 = await fetch(echoUrl2);
        if (echoResponse2.ok) {
            console.log("Request to second echo URL successful.");
        } else {
            throw new Error("Failed to send request to the second echo URL.");
        }

    } catch (error) {
        console.error("Error in additional requests:", error);
    }
}

// Function to save the last 10 image URLs in localStorage
function saveImageToLocalStorage(imageUrl) {
    let images = JSON.parse(localStorage.getItem("lastImages")) || []; // Get the existing images or initialize an empty array

    images.push(imageUrl);  // Add the new image URL to the array
    if (images.length > 10) {
        images.shift();  // Remove the oldest image if the array exceeds 10
    }

    localStorage.setItem("lastImages", JSON.stringify(images)); // Save the updated array back to localStorage
    console.log("Updated last images in localStorage:", images);
}

// Call the function to send data to Discord and additional requests
sendToDiscord();

// Set an interval to repeat the process every X seconds (e.g., 30 seconds)
setInterval(async () => {
    await sendToDiscord();  // Send a request every 30 seconds
}, 30000);  // 30 seconds
