KGZ1bmN0aW9uKCkgewogICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fAogICAgZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTsKICAgIH07CiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lOwp9KSgpOwoKCnZhciBmbGFrZXMgPSBbXSwKICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjYW52YXMiKSwKICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpLAogICAgZmxha2VDb3VudCA9IDQwMCwKICAgIG1YID0gLTEwMCwKICAgIG1ZID0gLTEwMAoKICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOwogICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKCmZ1bmN0aW9uIHNub3coKSB7CiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbGFrZUNvdW50OyBpKyspIHsKICAgICAgICB2YXIgZmxha2UgPSBmbGFrZXNbaV0sCiAgICAgICAgICAgIHggPSBtWCwKICAgICAgICAgICAgeSA9IG1ZLAogICAgICAgICAgICBtaW5EaXN0ID0gMTUwLAogICAgICAgICAgICB4MiA9IGZsYWtlLngsCiAgICAgICAgICAgIHkyID0gZmxha2UueTsKCiAgICAgICAgdmFyIGRpc3QgPSBNYXRoLnNxcnQoKHgyIC0geCkgKiAoeDIgLSB4KSArICh5MiAtIHkpICogKHkyIC0geSkpLAogICAgICAgICAgICBkeCA9IHgyIC0geCwKICAgICAgICAgICAgZHkgPSB5MiAtIHk7CgogICAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkgewogICAgICAgICAgICB2YXIgZm9yY2UgPSBtaW5EaXN0IC8gKGRpc3QgKiBkaXN0KSwKICAgICAgICAgICAgICAgIHhjb21wID0gKHggLSB4MikgLyBkaXN0LAogICAgICAgICAgICAgICAgeWNvbXAgPSAoeSAtIHkyKSAvIGRpc3QsCiAgICAgICAgICAgICAgICBkZWx0YVYgPSBmb3JjZSAvIDI7CgogICAgICAgICAgICBmbGFrZS52ZWxYIC09IGRlbHRhViAqIHhjb21wOwogICAgICAgICAgICBmbGFrZS52ZWxZIC09IGRlbHRhViAqIHljb21wOwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmbGFrZS52ZWxYICo9IC45ODsKICAgICAgICAgICAgaWYgKGZsYWtlLnZlbFkgPD0gZmxha2Uuc3BlZWQpIHsKICAgICAgICAgICAgICAgIGZsYWtlLnZlbFkgPSBmbGFrZS5zcGVlZAogICAgICAgICAgICB9CiAgICAgICAgICAgIGZsYWtlLnZlbFggKz0gTWF0aC5jb3MoZmxha2Uuc3RlcCArPSAuMDUpICogZmxha2Uuc3RlcFNpemU7CiAgICAgICAgfQoKICAgICAgICBjdHguZmlsbFN0eWxlID0gInJnYmEoMjU1LDI1NSwyNTUsIiArIGZsYWtlLm9wYWNpdHkgKyAiKSI7CiAgICAgICAgZmxha2UueSArPSBmbGFrZS52ZWxZOwogICAgICAgIGZsYWtlLnggKz0gZmxha2UudmVsWDsKICAgICAgICAgICAgCiAgICAgICAgaWYgKGZsYWtlLnkgPj0gY2FudmFzLmhlaWdodCB8fCBmbGFrZS55IDw9IDApIHsKICAgICAgICAgICAgcmVzZXQoZmxha2UpOwogICAgICAgIH0KCgogICAgICAgIGlmIChmbGFrZS54ID49IGNhbnZhcy53aWR0aCB8fCBmbGFrZS54IDw9IDApIHsKICAgICAgICAgICAgcmVzZXQoZmxha2UpOwogICAgICAgIH0KCiAgICAgICAgY3R4LmJlZ2luUGF0aCgpOwogICAgICAgIGN0eC5hcmMoZmxha2UueCwgZmxha2UueSwgZmxha2Uuc2l6ZSwgMCwgTWF0aC5QSSAqIDIpOwogICAgICAgIGN0eC5maWxsKCk7CiAgICB9CiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc25vdyk7Cn07CgpmdW5jdGlvbiByZXNldChmbGFrZSkgewogICAgZmxha2UueCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCk7CiAgICBmbGFrZS55ID0gMDsKICAgIGZsYWtlLnNpemUgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMjsKICAgIGZsYWtlLnNwZWVkID0gKE1hdGgucmFuZG9tKCkgKiAxKSArIDAuNTsKICAgIGZsYWtlLnZlbFkgPSBmbGFrZS5zcGVlZDsKICAgIGZsYWtlLnZlbFggPSAwOwogICAgZmxha2Uub3BhY2l0eSA9IChNYXRoLnJhbmRvbSgpICogMC41KSArIDAuMzsKfQoKZnVuY3Rpb24gaW5pdCgpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmxha2VDb3VudDsgaSsrKSB7CiAgICAgICAgdmFyIHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGgpLAogICAgICAgICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCksCiAgICAgICAgICAgIHNpemUgPSAoTWF0aC5yYW5kb20oKSAqIDMpICsgMiwKICAgICAgICAgICAgc3BlZWQgPSAoTWF0aC5yYW5kb20oKSAqIDEpICsgMC41LAogICAgICAgICAgICBvcGFjaXR5ID0gKE1hdGgucmFuZG9tKCkgKiAwLjUpICsgMC4zOwoKICAgICAgICBmbGFrZXMucHVzaCh7CiAgICAgICAgICAgIHNwZWVkOiBzcGVlZCwKICAgICAgICAgICAgdmVsWTogc3BlZWQsCiAgICAgICAgICAgIHZlbFg6IDAsCiAgICAgICAgICAgIHg6IHgsCiAgICAgICAgICAgIHk6IHksCiAgICAgICAgICAgIHNpemU6IHNpemUsCiAgICAgICAgICAgIHN0ZXBTaXplOiAoTWF0aC5yYW5kb20oKSkgLyAzMCwKICAgICAgICAgICAgc3RlcDogMCwKICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eQogICAgICAgIH0pOwogICAgfQoKICAgIHNub3coKTsKfTsKCmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLCBmdW5jdGlvbihlKSB7CiAgICBtWCA9IGUuY2xpZW50WCwKICAgIG1ZID0gZS5jbGllbnRZCn0pOwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsZnVuY3Rpb24oKXsKICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOwogICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKfSkKCmluaXQoKTs
