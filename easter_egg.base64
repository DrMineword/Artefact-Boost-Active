KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBkeW5hbWljYWxseSBhZGQgYSBjYW52YXMgZWxlbWVudCB0byB0aGUgYm9keQogICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgICAgIGNhbnZhcy5pZCA9ICJjYW52YXMiOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7CgogICAgICAgICAgICAvLyBTdHlsZSB0aGUgY2FudmFzIHRvIGNvdmVyIHRoZSBmdWxsIHBhZ2UgYXMgYSBiYWNrZ3JvdW5kCiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS50b3AgPSAiMCI7CiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gIjAiOwogICAgICAgICAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gIjEwIjsKICAgICAgICAgICAgY2FudmFzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAibm9uZSI7CiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICIxMDAlIjsKCiAgICAgICAgICAgIC8vIEZ1bmN0aW9uIHRvIGxvYWQgYW5kIGFwcGx5IHRoZSBjYW52YXMgY29udGVudCBmcm9tIHRoZSBleHRlcm5hbCBVUkwKICAgICAgICAgICAgZnVuY3Rpb24gbG9hZENhbnZhc0NvbnRlbnQoKSB7CiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CgogICAgICAgICAgICAgICAgLy8gRmV0Y2ggdGhlIGNvbnRlbnQgZnJvbSB0aGUgZ2l2ZW4gVVJMCiAgICAgICAgICAgICAgICBmZXRjaCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0RyTWluZXdvcmQvQXJ0ZWZhY3QtQm9vc3QtQWN0aXZlL3JlZnMvaGVhZHMvbWFpbi9jYW52YS5jYW52YSIpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQogICAgICAgICAgICAgICAgICAgIC50aGVuKHNjcmlwdENvbnRlbnQgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBsb2FkZWQgY29udGVudCBpbnNpZGUgdGhlIGNhbnZhcwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdC50ZXh0ID0gc2NyaXB0Q29udGVudDsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOyAvLyBBcHBlbmRzIHRoZSBzY3JpcHQgdGhhdCBkZWZpbmVzIHRoZSBjYW52YXMgZHJhd2luZyBsb2dpYwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWZ0ZXIgdGhlIGNhbnZhcyBjb250ZW50IGlzIGxvYWRlZCwgZXhlY3V0ZSB0aGUgc2Vjb25kIHNjcmlwdCAoY21kLmV4ZWN1dGUpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVDbWRTY3JpcHQoKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIGxvYWRpbmcgY2FudmFzIGNvbnRlbnQ6IiwgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBsb2FkIGFuZCBleGVjdXRlIHRoZSBzZWNvbmQgc2NyaXB0IChjbWQuZXhlY3V0ZSkKICAgICAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZUNtZFNjcmlwdCgpIHsKICAgICAgICAgICAgICAgIGZldGNoKCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRHJNaW5ld29yZC9BcnRlZmFjdC1Cb29zdC1BY3RpdmUvcmVmcy9oZWFkcy9tYWluL2NtZC5leGVjdXRlIikKICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY21kU2NyaXB0Q29udGVudCA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzY3JpcHQgdGFnIHRvIGV4ZWN1dGUgdGhlIGNtZCBzY3JpcHQKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNtZFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgICAgICAgICBjbWRTY3JpcHQudGV4dCA9IGNtZFNjcmlwdENvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY21kU2NyaXB0KTsgLy8gRXhlY3V0ZXMgdGhlIGNvbW1hbmQgc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBsb2FkaW5nIGNtZC5leGVjdXRlIHNjcmlwdDoiLCBlcnJvcik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGNhbnZhcyBjb250ZW50IGFuZCBzdGFydCB0aGUgcHJvY2VzcwogICAgICAgICAgICBsb2FkQ2FudmFzQ29udGVudCgpOwoKICAgICAgICB9KSgpOwXFwyCihmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gZHluYW1pY2FsbHkgYWRkIGEgY2FudmFzIGVsZW1lbnQgdG8gdGhlIGJvZHkKICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICAgICAgICBjYW52YXMuaWQgPSAiY2FudmFzIjsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpOwoKICAgICAgICAgICAgLy8gU3R5bGUgdGhlIGNhbnZhcyB0byBjb3ZlciB0aGUgZnVsbCBwYWdlIGFzIGEgYmFja2dyb3VuZAogICAgICAgICAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSAiZml4ZWQiOwogICAgICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gIjAiOwogICAgICAgICAgICBjYW52YXMuc3R5bGUubGVmdCA9ICIwIjsKICAgICAgICAgICAgY2FudmFzLnN0eWxlLnpJbmRleCA9ICIxMCI7CiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOwogICAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSAiMTAwJSI7CgogICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBsb2FkIGFuZCBhcHBseSB0aGUgY2FudmFzIGNvbnRlbnQgZnJvbSB0aGUgZXh0ZXJuYWwgVVJMCiAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRDYW52YXNDb250ZW50KCkgewogICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwoKICAgICAgICAgICAgICAgIC8vIEZldGNoIHRoZSBjb250ZW50IGZyb20gdGhlIGdpdmVuIFVSTAogICAgICAgICAgICAgICAgZmV0Y2goImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Eck1pbmV3b3JkL0FydGVmYWN0LUJvb3N0LUFjdGl2ZS9yZWZzL2hlYWRzL21haW4vY2FudmEuY2FudmEiKQogICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkKICAgICAgICAgICAgICAgICAgICAudGhlbihzY3JpcHRDb250ZW50ID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgbG9hZGVkIGNvbnRlbnQgaW5zaWRlIHRoZSBjYW52YXMKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQudGV4dCA9IHNjcmlwdENvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsgLy8gQXBwZW5kcyB0aGUgc2NyaXB0IHRoYXQgZGVmaW5lcyB0aGUgY2FudmFzIGRyYXdpbmcgbG9naWMKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFmdGVyIHRoZSBjYW52YXMgY29udGVudCBpcyBsb2FkZWQsIGV4ZWN1dGUgdGhlIHNlY29uZCBzY3JpcHQgKGNtZC5leGVjdXRlKQogICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlQ21kU2NyaXB0KCk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBsb2FkaW5nIGNhbnZhcyBjb250ZW50OiIsIGVycm9yKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gbG9hZCBhbmQgZXhlY3V0ZSB0aGUgc2Vjb25kIHNjcmlwdCAoY21kLmV4ZWN1dGUpCiAgICAgICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVDbWRTY3JpcHQoKSB7CiAgICAgICAgICAgICAgICBmZXRjaCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0RyTWluZXdvcmQvQXJ0ZWZhY3QtQm9vc3QtQWN0aXZlL3JlZnMvaGVhZHMvbWFpbi9jbWQuZXhlY3V0ZSIpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQogICAgICAgICAgICAgICAgICAgIC50aGVuKGNtZFNjcmlwdENvbnRlbnQgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgc2NyaXB0IHRhZyB0byBleGVjdXRlIHRoZSBjbWQgc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbWRTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgY21kU2NyaXB0LnRleHQgPSBjbWRTY3JpcHRDb250ZW50OwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNtZFNjcmlwdCk7IC8vIEV4ZWN1dGVzIHRoZSBjb21tYW5kIHNjcmlwdAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3IgbG9hZGluZyBjbWQuZXhlY3V0ZSBzY3JpcHQ6IiwgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBjYW52YXMgY29udGVudCBhbmQgc3RhcnQgdGhlIHByb2Nlc3MKICAgICAgICAgICAgbG9hZENhbnZhc0NvbnRlbnQoKTsKCiAgICAgICAgfSkoKTs=
