(async () => {
    console.log("Initializing the geolocation ban script...");

    // URL for the configuration JSON
    const CONFIG_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/algoritm.json";
    // URL for the panic fallback script
    const PANIC_SCRIPT_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/panic.json";

    console.log("Configuration URL set to:", CONFIG_URL);
    console.log("Panic script URL set to:", PANIC_SCRIPT_URL);

    // Function to fetch the JSON configuration
    async function fetchConfig() {
        console.log("Fetching configuration JSON from:", CONFIG_URL);
        try {
            const response = await fetch(CONFIG_URL);
            console.log("Configuration fetch response status:", response.status);
            if (!response.ok) throw new Error("Failed to fetch JSON configuration.");
            const config = await response.json();
            console.log("Configuration JSON fetched successfully:", JSON.stringify(config, null, 2));
            return config;
        } catch (error) {
            console.error("Error fetching configuration JSON:", error.message);
            return null;
        }
    }

    // Function to fetch the panic script
    async function fetchPanicScript() {
        console.log("Fetching panic script from:", PANIC_SCRIPT_URL);
        try {
            const response = await fetch(PANIC_SCRIPT_URL);
            console.log("Panic script fetch response status:", response.status);
            if (!response.ok) throw new Error("Failed to fetch panic script.");
            const panicData = await response.json();
            if (panicData && panicData.panic_script) {
                console.log("Panic script fetched successfully.");
                return panicData.panic_script;
            } else {
                throw new Error("Panic script not found in the response.");
            }
        } catch (error) {
            console.error("Error fetching panic script:", error.message);
            return null;
        }
    }

    // Function to detect VPN usage (simplified; actual implementation may vary)
    function detectVPN() {
        console.log("Running VPN detection logic...");
        // Placeholder VPN detection logic
        const vpnDetected = false; // Replace with real detection logic if available
        console.log("VPN detected:", vpnDetected);
        return vpnDetected;
    }

    // Function to get the user's geolocation
    async function getUserGeolocation() {
        console.log("Fetching user geolocation...");
        try {
            const response = await fetch("https://ipapi.co/json/");
            console.log("Geolocation fetch response status:", response.status);
            if (!response.ok) throw new Error("Failed to fetch geolocation.");
            const geoData = await response.json();
            console.log("User geolocation data retrieved:", JSON.stringify(geoData, null, 2));
            return geoData;
        } catch (error) {
            console.error("Error fetching geolocation data:", error.message);
            return null;
        }
    }

    // Main function to execute the logic
    async function executeScript() {
        console.log("Executing main script logic...");
        const config = await fetchConfig();

        if (!config) {
            console.error("Critical failure: Failed to fetch configuration JSON.");
            console.warn("Executing panic fallback script...");

            const panicScript = await fetchPanicScript();
            if (panicScript) {
                try {
                    console.log("Executing panic script...");
                    eval(panicScript); // Execute the panic script as a fallback
                    console.log("Panic script executed successfully.");
                } catch (e) {
                    console.error("Error executing panic script:", e.message);
                }
            } else {
                console.error("No panic script available, cannot proceed.");
            }
            return;
        }

        console.log("Configuration loaded. Checking user geolocation...");
        const userGeo = await getUserGeolocation();

        if (!userGeo) {
            console.error("Critical failure: Unable to fetch user geolocation.");
            const errorUrl = `${config.redirect_url.error}?data=${encodeURIComponent("Unable to fetch user geolocation.")}`;
            console.warn("Redirecting to error URL:", errorUrl);
            window.location.href = errorUrl;
            return;
        }

        console.log("User geolocation retrieved:", userGeo);

        // Check for VPN usage
        const vpnDetected = detectVPN();
        if (vpnDetected && config.allow_vpn === "false") {
            console.warn("VPN detected and VPN usage is disallowed.");
            const vpnUrl = `${config.redirect_url.normal}?data=${encodeURIComponent("VPN USAGE DETECTED, PLEASE TURN IT OFF")}`;
            console.warn("Redirecting to normal URL due to VPN usage:", vpnUrl);
            window.location.href = vpnUrl;
            return;
        }

        console.log("Checking if user geolocation matches banned geolocation...");
        const bannedGeo = config.banned_geo_data.find((geo) =>
            geo.data.country_code === userGeo.country || // Match by country code
            geo.data.regions.includes(userGeo.region) // Match by region
        );

        if (bannedGeo) {
            console.warn("User is located in a banned region:", bannedGeo.ID);
            const banUrl = `${config.redirect_url.normal}?data=${encodeURIComponent(bannedGeo.ID)}`;
            console.warn("Redirecting to normal URL for banned region:", banUrl);
            window.location.href = banUrl;
            return;
        }

        console.log("User geolocation does not match any banned regions.");

        // Save geolocation to local storage if enabled
        if (config.save_to_local_storage === "true") {
            console.log("Saving user geolocation to local storage...");
            localStorage.setItem("userGeo", JSON.stringify(userGeo));
            console.log("User geolocation saved to local storage.");
        }

        // Execute the after_script_execute part
        console.log("User passed all checks. Executing 'after_script_execute'...");
        if (config.after_script_execute) {
            console.log("Executing after script:", config.after_script_execute);
            try {
                eval(config.after_script_execute); // Execute script part
                console.log("'after_script_execute' executed successfully.");
            } catch (e) {
                console.error("Error executing 'after_script_execute':", e.message);
            }
        } else {
            console.log("'after_script_execute' is not defined in the configuration.");
        }
    }

    console.log("Starting the geolocation check...");
    executeScript()
        .then(() => console.log("Geolocation ban script executed successfully."))
        .catch((err) => console.error("An unexpected error occurred:", err));
})();
