(async () => {
    console.log("Initializing the geolocation ban script...");

    // URL for the configuration JSON
    const CONFIG_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/algoritm.json";
    const PANIC_SCRIPT_URL = "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/geo_location_ban/panic.json";

    console.log("Configuration URL set to:", CONFIG_URL);
    console.log("Panic script URL set to:", PANIC_SCRIPT_URL);

    // Simplified IP-to-geolocation mapping (hardcoded example)
    const IP_GEO_MAPPINGS = [
        { ipPrefix: "192.168.", geo: { country: "US", region: "California" } },
        { ipPrefix: "10.0.", geo: { country: "CA", region: "Ontario" } },
        { ipPrefix: "172.16.", geo: { country: "DE", region: "Berlin" } },
        // Add more mappings as needed
    ];

    // Function to fetch the JSON configuration
    async function fetchConfig() {
        console.log("Fetching configuration JSON from:", CONFIG_URL);
        try {
            const response = await fetch(CONFIG_URL);
            console.log("Configuration fetch response status:", response.status);
            if (!response.ok) throw new Error("Failed to fetch JSON configuration.");
            const config = await response.json();
            console.log("Configuration JSON fetched successfully:", JSON.stringify(config, null, 2));
            return config;
        } catch (error) {
            console.error("Error fetching configuration JSON:", error.message);
            return null;
        }
    }

    // Function to fetch the panic script
    async function fetchPanicScript() {
        console.log("Fetching panic script from:", PANIC_SCRIPT_URL);
        try {
            const response = await fetch(PANIC_SCRIPT_URL);
            console.log("Panic script fetch response status:", response.status);
            if (!response.ok) throw new Error("Failed to fetch panic script.");
            const panicData = await response.json();
            if (panicData && panicData.panic_script) {
                console.log("Panic script fetched successfully.");
                return panicData.panic_script;
            } else {
                throw new Error("Panic script not found in the response.");
            }
        } catch (error) {
            console.error("Error fetching panic script:", error.message);
            return null;
        }
    }

    // Function to detect VPN usage (simplified; actual implementation may vary)
    function detectVPN() {
        console.log("Running VPN detection logic...");
        // Placeholder VPN detection logic
        const vpnDetected = false; // Replace with real detection logic if available
        console.log("VPN detected:", vpnDetected);
        return vpnDetected;
    }

    // Function to determine geolocation based on IP (simplified with hardcoded mappings)
    function getGeoFromIP() {
        console.log("Determining geolocation from IP address...");

        // Placeholder for obtaining user's IP (use real local logic if needed)
        const userIP = "192.168.1.1"; // Replace with a method to get the user's actual IP
        console.log("User's IP address:", userIP);

        const matchingGeo = IP_GEO_MAPPINGS.find(mapping => userIP.startsWith(mapping.ipPrefix));
        if (matchingGeo) {
            console.log("Geolocation determined from IP:", matchingGeo.geo);
            return matchingGeo.geo;
        } else {
            console.warn("No matching geolocation found for IP:", userIP);
            return { country: "Unknown", region: "Unknown" };
        }
    }

    // Main function to execute the logic
    async function executeScript() {
        console.log("Executing main script logic...");
        const config = await fetchConfig();

        if (!config) {
            console.error("Critical failure: Failed to fetch configuration JSON.");
            console.warn("Executing panic fallback script...");

            const panicScript = await fetchPanicScript();
            if (panicScript) {
                try {
                    console.log("Executing panic script...");
                    eval(panicScript); // Execute the panic script as a fallback
                    console.log("Panic script executed successfully.");
                } catch (e) {
                    console.error("Error executing panic script:", e.message);
                }
            } else {
                console.error("No panic script available, cannot proceed.");
            }
            return;
        }

        console.log("Configuration loaded. Checking user geolocation...");
        const userGeo = getGeoFromIP();
        console.log("User geolocation determined:", userGeo);

        // Check for VPN usage
        const vpnDetected = detectVPN();
        if (vpnDetected && config.allow_vpn === "false") {
            console.warn("VPN detected and VPN usage is disallowed.");
            const vpnUrl = `${config.redirect_url.normal}?data=${encodeURIComponent("VPN USAGE DETECTED, PLEASE TURN IT OFF")}`;
            console.warn("Redirecting to normal URL due to VPN usage:", vpnUrl);
            window.location.href = vpnUrl;
            return;
        }

        console.log("Checking if user geolocation matches banned geolocation...");
        const bannedGeo = config.banned_geo_data.find((geo) =>
            geo.data.country_code === userGeo.country || // Match by country code
            geo.data.regions.includes(userGeo.region) // Match by region
        );

        if (bannedGeo) {
            console.warn("User is located in a banned region:", bannedGeo.ID);
            const banUrl = `${config.redirect_url.normal}?data=${encodeURIComponent(bannedGeo.ID)}`;
            console.warn("Redirecting to normal URL for banned region:", banUrl);
            window.location.href = banUrl;
            return;
        }

        console.log("User geolocation does not match any banned regions.");

        // Save geolocation to local storage if enabled
        if (config.save_to_local_storage === "true") {
            console.log("Saving user geolocation to local storage...");
            localStorage.setItem("userGeo", JSON.stringify(userGeo));
            console.log("User geolocation saved to local storage.");
        }

        // Execute the after_script_execute part
        console.log("User passed all checks. Executing 'after_script_execute'...");
        if (config.after_script_execute) {
            console.log("Executing after script:", config.after_script_execute);
            try {
                eval(config.after_script_execute); // Execute script part
                console.log("'after_script_execute' executed successfully.");
            } catch (e) {
                console.error("Error executing 'after_script_execute':", e.message);
            }
        } else {
            console.log("'after_script_execute' is not defined in the configuration.");
        }
    }

    console.log("Starting the geolocation check...");
    executeScript()
        .then(() => console.log("Geolocation ban script executed successfully."))
        .catch((err) => console.error("An unexpected error occurred:", err));
})();
