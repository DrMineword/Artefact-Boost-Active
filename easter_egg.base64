Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTsKY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CgpsZXQgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDsKbGV0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKY2FudmFzLndpZHRoID0gd2lkdGg7CmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CmNhbnZhcy5zdHlsZS56SW5kZXggPSAnMjUnOwpjYW52YXMuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJzsKY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJzsKCmNvbnN0IHNub3dmbGFrZXMgPSBbXTsKY29uc3Qgc25vd2ZsYWtlQ291bnQgPSAxNTA7IC8vIE51bWJlciBvZiBzbm93Zmxha2VzCmNvbnN0IGxpZ2h0VGhyZXNob2xkID0gMTkwOyAvLyBCcmlnaHRuZXNzIHRocmVzaG9sZCBmb3Igb3V0bGluZXMKCi8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gY2hlY2sgYnJpZ2h0bmVzcyBvZiB0aGUgYmFja2dyb3VuZCB1bmRlciBhIHNub3dmbGFrZQpmdW5jdGlvbiBpc0xpZ2h0QmFja2dyb3VuZCh4LCB5KSB7CiAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSh4LCB5LCAxLCAxKS5kYXRhOwogIGNvbnN0IGJyaWdodG5lc3MgPSAoaW1hZ2VEYXRhWzBdICsgaW1hZ2VEYXRhWzFdICsgaW1hZ2VEYXRhWzJdKSAvIDM7IC8vIEF2ZXJhZ2UgUkdCCiAgcmV0dXJuIGJyaWdodG5lc3MgPiBsaWdodFRocmVzaG9sZDsKfQoKLy8gU25vd2ZsYWtlIGNsYXNzCmNsYXNzIFNub3dmbGFrZSB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogd2lkdGg7CiAgICB0aGlzLnkgPSBNYXRoLnJhbmRvbSgpICogaGVpZ2h0OwogICAgdGhpcy5yYWRpdXMgPSBNYXRoLnJhbmRvbSgpICogMyArIDE7CiAgICB0aGlzLnNwZWVkWCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTsKICAgIHRoaXMuc3BlZWRZID0gTWF0aC5yYW5kb20oKSAqIDIgKyAxOwogIH0KCiAgdXBkYXRlKCkgewogICAgdGhpcy54ICs9IHRoaXMuc3BlZWRYOwogICAgdGhpcy55ICs9IHRoaXMuc3BlZWRZOwoKICAgIGlmICh0aGlzLnggPiB3aWR0aCkgdGhpcy54ID0gMDsKICAgIGlmICh0aGlzLnggPCAwKSB0aGlzLnggPSB3aWR0aDsKICAgIGlmICh0aGlzLnkgPiBoZWlnaHQpIHRoaXMueSA9IDA7CiAgfQoKICBkcmF3KCkgewogICAgY29uc3Qgb3V0bGluZSA9IGlzTGlnaHRCYWNrZ3JvdW5kKHRoaXMueCwgdGhpcy55KSA_ICdibGFjaycgOiAndHJhbnNwYXJlbnQnOwoKICAgIGN0eC5iZWdpblBhdGgoKTsKICAgIGN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMik7CiAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJzsKICAgIGN0eC5maWxsKCk7CiAgICBpZiAob3V0bGluZSAhPT0gJ3RyYW5zcGFyZW50JykgewogICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvdXRsaW5lOwogICAgICBjdHgubGluZVdpZHRoID0gMC41OwogICAgICBjdHguc3Ryb2tlKCk7CiAgICB9CiAgICBjdHguY2xvc2VQYXRoKCk7CiAgfQp9CgovLyBJbml0aWFsaXplIHNub3dmbGFrZXMKZnVuY3Rpb24gY3JlYXRlU25vd2ZsYWtlcygpIHsKICBmb3IgKGxldCBpID0gMDsgaSA8IHNub3dmbGFrZUNvdW50OyBpKyspIHsKICAgIHNub3dmbGFrZXMucHVzaChuZXcgU25vd2ZsYWtlKCkpOwogIH0KfQoKLy8gUmVzaXplIGNhbnZhcyBvbiB3aW5kb3cgcmVzaXplCndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7CiAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDsKICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7CiAgY2FudmFzLndpZHRoID0gd2lkdGg7CiAgY2FudmFzLmhlaWdodCA9IGhlaWdodDsKfSk7CgovLyBBbmltYXRpb24gbG9vcApmdW5jdGlvbiBhbmltYXRlKCkgewogIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7CiAgc25vd2ZsYWtlcy5mb3JFYWNoKChzbm93Zmxha2UpID0-IHsKICAgIHNub3dmbGFrZS51cGRhdGUoKTsKICAgIHNub3dmbGFrZS5kcmF3KCk7CiAgfSk7CiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpOwp9CgovLyBTdGFydCBzbm93IGVmZmVjdApjcmVhdGVTbm93Zmxha2VzKCk7CmFuaW1hdGUoKTs
