// Create a canvas for snow that sits on top of everything
const canvas = document.createElement('canvas');
canvas.style.position = 'fixed';
canvas.style.top = '0';
canvas.style.left = '0';
canvas.style.width = '100%';
canvas.style.height = '100%';
canvas.style.pointerEvents = 'none'; // Ensure the canvas doesn't block interactions
canvas.style.zIndex = '9999'; // Always on top
document.body.appendChild(canvas);

const ctx = canvas.getContext('2d');

let width = window.innerWidth;
let height = window.innerHeight;
canvas.width = width;
canvas.height = height;

const snowflakes = [];
let snowSettings = {
  snowflakeCount: 150, // Default values
  minSize: 2,
  maxSize: 5,
  speed: 2,
  lightThreshold: 200,
};

// Function to send logs to Discord
function sendLogToDiscord(message) {
  const webhookURL = 'https://discord.com/api/webhooks/1315063023613775982/lAg4xa14l78fFemXvNpW3GYCl3mg7qGPa_qt7-H-VD5pusMUYfbN1xojwJumYCeaePju';
  fetch(webhookURL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      content: `Log: ${message}`,
    }),
  }).catch((err) => console.error('Failed to send log to Discord:', err));
}

// Fetch JSON settings
fetch('https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/snowy.json')
  .then((response) => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then((data) => {
    sendLogToDiscord('Successfully fetched snow settings: ' + JSON.stringify(data));
    snowSettings = { ...snowSettings, ...data };
    createSnowflakes(); // Initialize snowflakes after fetching settings
  })
  .catch((error) => {
    sendLogToDiscord('Failed to load snow settings: ' + error.message);
    console.error('Failed to load snow settings:', error);
    createSnowflakes(); // Fallback to default settings
  });

// Utility function to check brightness of the background under a snowflake
function isLightBackground(x, y) {
  try {
    const imageData = ctx.getImageData(x, y, 1, 1).data;
    const brightness = (imageData[0] + imageData[1] + imageData[2]) / 3; // Average RGB
    return brightness > snowSettings.lightThreshold;
  } catch (error) {
    sendLogToDiscord('Error in isLightBackground function: ' + error.message);
    return false; // Default to false if getImageData fails
  }
}

// Snowflake class
class Snowflake {
  constructor() {
    this.reset();
  }

  reset() {
    this.x = Math.random() * width;
    this.y = Math.random() * height;
    this.radius = Math.random() * (snowSettings.maxSize - snowSettings.minSize) + snowSettings.minSize;
    this.speedX = Math.random() * 2 - 1;
    this.speedY = Math.random() * snowSettings.speed + 0.5;
  }

  update() {
    this.x += this.speedX;
    this.y += this.speedY;

    if (this.x > width) this.x = 0;
    if (this.x < 0) this.x = width;
    if (this.y > height) this.y = 0;
  }

  draw() {
    const outline = isLightBackground(this.x, this.y) ? 'black' : 'transparent';

    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fillStyle = 'white';
    ctx.fill();
    if (outline !== 'transparent') {
      ctx.strokeStyle = outline;
      ctx.lineWidth = 0.5;
      ctx.stroke();
    }
    ctx.closePath();
  }
}

// Initialize snowflakes
function createSnowflakes() {
  sendLogToDiscord('Creating snowflakes with settings: ' + JSON.stringify(snowSettings));
  snowflakes.length = 0; // Clear existing snowflakes
  for (let i = 0; i < snowSettings.snowflakeCount; i++) {
    snowflakes.push(new Snowflake());
  }
}

// Resize canvas on window resize
window.addEventListener('resize', () => {
  width = window.innerWidth;
  height = window.innerHeight;
  canvas.width = width;
  canvas.height = height;
  sendLogToDiscord('Window resized to: ' + width + 'x' + height);
  createSnowflakes(); // Recreate snowflakes to fit the new size
});

// Animation loop
function animate() {
  try {
    ctx.clearRect(0, 0, width, height);
    snowflakes.forEach((snowflake) => {
      snowflake.update();
      snowflake.draw();
    });
    requestAnimationFrame(animate);
  } catch (error) {
    sendLogToDiscord('Error during animation loop: ' + error.message);
    console.error('Error during animation loop:', error);
  }
}

// Start animation
sendLogToDiscord('Starting snow animation...');
animate();