(function () {
    console.log("Canvas Manager initialized...");

    // Create and style the canvas
    var canvas = document.createElement("canvas");
    canvas.id = "canvas";
    document.body.appendChild(canvas);

    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.zIndex = "10";
    canvas.style.pointerEvents = "none";
    canvas.style.width = "100%";
    canvas.style.height = "100%";

    // Create and style the notification banner
    var notification = document.createElement("div");
    notification.id = "notification-banner";
    notification.style.position = "fixed";
    notification.style.top = "0";
    notification.style.left = "0";
    notification.style.width = "100%";
    notification.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
    notification.style.color = "white";
    notification.style.textAlign = "center";
    notification.style.padding = "10px";
    notification.style.fontSize = "18px";
    notification.style.zIndex = "20"; // Higher than canvas
    notification.style.display = "none"; // Initially hidden
    document.body.appendChild(notification);

    // Function to dynamically load and execute a script
    function loadScript(url, description = "script") {
        console.log(`Attempting to load ${description} from ${url}`);
        return fetch(url)
            .then(response => {
                if (!response.ok) throw new Error(`Failed to load ${description}. HTTP status: ${response.status}`);
                return response.text();
            })
            .then(scriptContent => {
                console.log(`${description} loaded successfully.`);
                var script = document.createElement("script");
                script.text = scriptContent;
                document.body.appendChild(script);
                console.log(`${description} executed successfully.`);
            })
            .catch(error => {
                console.error(`Error loading ${description}:`, error);
            });
    }

    // JSON-like configuration for canvas animations
    var canvasSchedules = [
        {
            name: "Christmas Event",
            url: "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/snowy.canva",
            dates: [
                { type: "start", date: "20YY-12-24T00:00:00Z" },
                { type: "end", date: "20YY-12-26T23:59:59Z" },
                { type: "start", date: "20YY-01-01T03:01:00Z" },
                { type: "end", date: "20YY-01-07T23:59:59Z" }
            ],
            message: "Merry Christmas! Enjoy the festive season!"
        },
        {
        name: "New Year's Eve - December",
        url: "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/New_Years_Eve.exe.canva",
        dates: [
            { type: "start", date: "20YY-12-31T20:00:00Z" },  // Start at 8 PM UTC, Dec 31, 2024
            { type: "end", date: "20YY-12-31T23:59:59Z" }    // End at 11:59 PM UTC, Dec 31, 2024
        ],
        message: "Happy New Year!!"
    },
    {
        name: "New Year's Eve - January",
        url: "https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/New_Years_Eve.exe.canva",
        dates: [
            { type: "start", date: "20YY-01-01T00:00:00Z" },  // Start at 12:00 AM UTC, Jan 1, 2025
            { type: "end", date: "20YY-01-01T03:00:00Z" }    // End at 3:00 AM UTC, Jan 1, 2025
        ],
        message: "Welcom
e New Year!!!"
    }
    ];

    // Function to check if the current time is within any date range of an event
    function isDateInRange(dates) {
        var now = new Date();
        console.log("Current time:", now.toISOString());

        for (var i = 0; i < dates.length - 1; i++) {
            if (dates[i].type === "start" && dates[i + 1].type === "end") {
                var start = new Date(dates[i].date);
                var end = new Date(dates[i + 1].date);
                if (now >= start && now <= end) {
                    console.log(`Current time is within range: ${start.toISOString()} - ${end.toISOString()}`);
                    return true;
                }
            }
        }

        console.log("Current time is not within any range.");
        return false;
    }

    // Function to find the current canvas schedule
    function getCurrentSchedule() {
        for (var schedule of canvasSchedules) {
            console.log(`Evaluating schedule: ${schedule.name}`);
            if (isDateInRange(schedule.dates)) {
                console.log(`Matching schedule found: ${schedule.name}`);
                return schedule;
            }
        }

        console.log("No matching schedule found.");
        return null;
    }

    // Function to load and apply the appropriate canvas content
    function loadCanvasContent() {
        console.log("Loading canvas content...");

        var schedule = getCurrentSchedule();
        if (schedule) {
            console.log(`Loading canvas for: ${schedule.name}`);
            loadScript(schedule.url, "canvas content");

            // Display notification message
            if (schedule.message) {
                notification.innerText = schedule.message;
                notification.style.display = "block"; // Show the banner
                console.log(`Displayed notification: ${schedule.message}`);
            }
        } else {
            console.log("No canvas content to load at this time.");
        }
    }

    // Initialize everything
    function initialize() {
        console.log("Initializing Canvas Manager...");
        loadCanvasContent();
    }

    initialize();
})();