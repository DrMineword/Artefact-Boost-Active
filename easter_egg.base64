KGZ1bmN0aW9uICgpIHsKICAgIGNvbnNvbGUubG9nKCJDYW52YXMgTWFuYWdlciBpbml0aWFsaXplZC4uLiIpOwoKICAgIC8vIENyZWF0ZSBhbmQgc3R5bGUgdGhlIGNhbnZhcwogICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgY2FudmFzLmlkID0gImNhbnZhcyI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7CgogICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gImZpeGVkIjsKICAgIGNhbnZhcy5zdHlsZS50b3AgPSAiMCI7CiAgICBjYW52YXMuc3R5bGUubGVmdCA9ICIwIjsKICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAiMTAiOwogICAgY2FudmFzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAibm9uZSI7CiAgICBjYW52YXMuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gIjEwMCUiOwoKICAgIC8vIENyZWF0ZSBhbmQgc3R5bGUgdGhlIG5vdGlmaWNhdGlvbiBiYW5uZXIKICAgIHZhciBub3RpZmljYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIG5vdGlmaWNhdGlvbi5pZCA9ICJub3RpZmljYXRpb24tYmFubmVyIjsKICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgICBub3RpZmljYXRpb24uc3R5bGUudG9wID0gIjAiOwogICAgbm90aWZpY2F0aW9uLnN0eWxlLmxlZnQgPSAiMCI7CiAgICBub3RpZmljYXRpb24uc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICBub3RpZmljYXRpb24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gInJnYmEoMCwgMCwgMCwgMC44KSI7CiAgICBub3RpZmljYXRpb24uc3R5bGUuY29sb3IgPSAid2hpdGUiOwogICAgbm90aWZpY2F0aW9uLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOwogICAgbm90aWZpY2F0aW9uLnN0eWxlLnBhZGRpbmcgPSAiMTBweCI7CiAgICBub3RpZmljYXRpb24uc3R5bGUuZm9udFNpemUgPSAiMThweCI7CiAgICBub3RpZmljYXRpb24uc3R5bGUuekluZGV4ID0gIjIwIjsgLy8gSGlnaGVyIHRoYW4gY2FudmFzCiAgICBub3RpZmljYXRpb24uc3R5bGUuZGlzcGxheSA9ICJub25lIjsgLy8gSW5pdGlhbGx5IGhpZGRlbgogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub3RpZmljYXRpb24pOwoKICAgIC8vIEZ1bmN0aW9uIHRvIGR5bmFtaWNhbGx5IGxvYWQgYW5kIGV4ZWN1dGUgYSBzY3JpcHQKICAgIGZ1bmN0aW9uIGxvYWRTY3JpcHQodXJsLCBkZXNjcmlwdGlvbiA9ICJzY3JpcHQiKSB7CiAgICAgICAgY29uc29sZS5sb2coYEF0dGVtcHRpbmcgdG8gbG9hZCAke2Rlc2NyaXB0aW9ufSBmcm9tICR7dXJsfWApOwogICAgICAgIHJldHVybiBmZXRjaCh1cmwpCiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0-IHsKICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgJHtkZXNjcmlwdGlvbn0uIEhUVFAgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC50aGVuKHNjcmlwdENvbnRlbnQgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZGVzY3JpcHRpb259IGxvYWRlZCBzdWNjZXNzZnVsbHkuYCk7CiAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICAgICAgICBzY3JpcHQudGV4dCA9IHNjcmlwdENvbnRlbnQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtkZXNjcmlwdGlvbn0gZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LmApOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyAke2Rlc2NyaXB0aW9ufTpgLCBlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgfQoKICAgIC8vIEpTT04tbGlrZSBjb25maWd1cmF0aW9uIGZvciBjYW52YXMgYW5pbWF0aW9ucwogICAgdmFyIGNhbnZhc1NjaGVkdWxlcyA9IFsKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICJDaHJpc3RtYXMgRXZlbnQiLAogICAgICAgICAgICB1cmw6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRHJNaW5ld29yZC9BcnRlZmFjdC1Cb29zdC1BY3RpdmUvcmVmcy9oZWFkcy9tYWluL3Nub3d5LmNhbnZhIiwKICAgICAgICAgICAgZGF0ZXM6IFsKICAgICAgICAgICAgICAgIHsgdHlwZTogInN0YXJ0IiwgZGF0ZTogIjIwWVktMTItMjRUMDA6MDA6MDBaIiB9LAogICAgICAgICAgICAgICAgeyB0eXBlOiAiZW5kIiwgZGF0ZTogIjIwWVktMTItMjZUMjM6NTk6NTlaIiB9LAogICAgICAgICAgICAgICAgeyB0eXBlOiAic3RhcnQiLCBkYXRlOiAiMjBZWS0wMS0wMVQwMzowMTowMFoiIH0sCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJlbmQiLCBkYXRlOiAiMjBZWS0wMS0wN1QyMzo1OTo1OVoiIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgbWVzc2FnZTogIk1lcnJ5IENocmlzdG1hcyEgRW5qb3kgdGhlIGZlc3RpdmUgc2Vhc29uISIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIk5ldyBZZWFyJ3MgRXZlIC0gRGVjZW1iZXIiLAogICAgICAgICAgICB1cmw6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRHJNaW5ld29yZC9BcnRlZmFjdC1Cb29zdC1BY3RpdmUvcmVmcy9oZWFkcy9tYWluL05ld19ZZWFyc19FdmUuZXhlLmNhbnZhIiwKICAgICAgICAgICAgZGF0ZXM6IFsKICAgICAgICAgICAgICAgIHsgdHlwZTogInN0YXJ0IiwgZGF0ZTogIjIwWVktMTItMzFUMjA6MDA6MDBaIiB9LCAgLy8gU3RhcnQgYXQgOCBQTSBVVEMsIERlYyAzMSwgMjAyNAogICAgICAgICAgICAgICAgeyB0eXBlOiAiZW5kIiwgZGF0ZTogIjIwWVktMTItMzFUMjM6NTk6NTlaIiB9ICAgIC8vIEVuZCBhdCAxMTo1OSBQTSBVVEMsIERlYyAzMSwgMjAyNAogICAgICAgICAgICBdLAogICAgICAgICAgICBtZXNzYWdlOiAiSGFwcHkgTmV3IFllYXIhISIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIk5ldyBZZWFyJ3MgRXZlIC0gSmFudWFyeSIsCiAgICAgICAgICAgIHVybDogImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Eck1pbmV3b3JkL0FydGVmYWN0LUJvb3N0LUFjdGl2ZS9yZWZzL2hlYWRzL21haW4vTmV3X1llYXJzX0V2ZS5leGUuY2FudmEiLAogICAgICAgICAgICBkYXRlczogWwogICAgICAgICAgICAgICAgeyB0eXBlOiAic3RhcnQiLCBkYXRlOiAiMjBZWS0wMS0wMVQwMDowMDowMFoiIH0sICAvLyBTdGFydCBhdCAxMjowMCBBTSBVVEMsIEphbiAxLCAyMDI1CiAgICAgICAgICAgICAgICB7IHR5cGU6ICJlbmQiLCBkYXRlOiAiMjBZWS0wMS0wMVQwMzowMDowMFoiIH0gICAgLy8gRW5kIGF0IDM6MDAgQU0gVVRDLCBKYW4gMSwgMjAyNQogICAgICAgICAgICBdLAogICAgICAgICAgICBtZXNzYWdlOiAiV2VsY29tZSB0aGUgTmV3IFllYXIhISEiCiAgICAgICAgfQogICAgXTsKCiAgICAvLyBGdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgY3VycmVudCB0aW1lIGlzIHdpdGhpbiBhbnkgZGF0ZSByYW5nZSBvZiBhbiBldmVudAogICAgZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShkYXRlcykgewogICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICAgIGNvbnNvbGUubG9nKCJDdXJyZW50IHRpbWU6Iiwgbm93LnRvSVNPU3RyaW5nKCkpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGVzLmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICBpZiAoZGF0ZXNbaV0udHlwZSA9PT0gInN0YXJ0IiAmJiBkYXRlc1tpICsgMV0udHlwZSA9PT0gImVuZCIpIHsKICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IG5ldyBEYXRlKGRhdGVzW2ldLmRhdGUpOwogICAgICAgICAgICAgICAgdmFyIGVuZCA9IG5ldyBEYXRlKGRhdGVzW2kgKyAxXS5kYXRlKTsKICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnQgJiYgbm93IDw9IGVuZCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDdXJyZW50IHRpbWUgaXMgd2l0aGluIHJhbmdlOiAke3N0YXJ0LnRvSVNPU3RyaW5nKCl9IC0gJHtlbmQudG9JU09TdHJpbmcoKX1gKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coIkN1cnJlbnQgdGltZSBpcyBub3Qgd2l0aGluIGFueSByYW5nZS4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8gRnVuY3Rpb24gdG8gZmluZCB0aGUgY3VycmVudCBjYW52YXMgc2NoZWR1bGUKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRTY2hlZHVsZSgpIHsKICAgICAgICBmb3IgKHZhciBzY2hlZHVsZSBvZiBjYW52YXNTY2hlZHVsZXMpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coYEV2YWx1YXRpbmcgc2NoZWR1bGU6ICR7c2NoZWR1bGUubmFtZX1gKTsKICAgICAgICAgICAgaWYgKGlzRGF0ZUluUmFuZ2Uoc2NoZWR1bGUuZGF0ZXMpKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTWF0Y2hpbmcgc2NoZWR1bGUgZm91bmQ6ICR7c2NoZWR1bGUubmFtZX1gKTsKICAgICAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coIk5vIG1hdGNoaW5nIHNjaGVkdWxlIGZvdW5kLiIpOwogICAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIGxvYWQgYW5kIGFwcGx5IHRoZSBhcHByb3ByaWF0ZSBjYW52YXMgY29udGVudAogICAgZnVuY3Rpb24gbG9hZENhbnZhc0NvbnRlbnQoKSB7CiAgICAgICAgY29uc29sZS5sb2coIkxvYWRpbmcgY2FudmFzIGNvbnRlbnQuLi4iKTsKCiAgICAgICAgdmFyIHNjaGVkdWxlID0gZ2V0Q3VycmVudFNjaGVkdWxlKCk7CiAgICAgICAgaWYgKHNjaGVkdWxlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBMb2FkaW5nIGNhbnZhcyBmb3I6ICR7c2NoZWR1bGUubmFtZX1gKTsKICAgICAgICAgICAgbG9hZFNjcmlwdChzY2hlZHVsZS51cmwsICJjYW52YXMgY29udGVudCIpOwoKICAgICAgICAgICAgLy8gRGlzcGxheSBub3RpZmljYXRpb24gbWVzc2FnZQogICAgICAgICAgICBpZiAoc2NoZWR1bGUubWVzc2FnZSkgewogICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmlubmVyVGV4dCA9IHNjaGVkdWxlLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICBub3RpZmljYXRpb24uc3R5bGUuZGlzcGxheSA9ICJibG9jayI7IC8vIFNob3cgdGhlIGJhbm5lcgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYERpc3BsYXllZCBub3RpZmljYXRpb246ICR7c2NoZWR1bGUubWVzc2FnZX1gKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJObyBjYW52YXMgY29udGVudCB0byBsb2FkIGF0IHRoaXMgdGltZS4iKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gSW5pdGlhbGl6ZSBldmVyeXRoaW5nCiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJJbml0aWFsaXppbmcgQ2FudmFzIE1hbmFnZXIuLi4iKTsKICAgICAgICBsb2FkQ2FudmFzQ29udGVudCgpOwogICAgfQoKICAgIGluaXRpYWxpemUoKTsKfSkoKTs
