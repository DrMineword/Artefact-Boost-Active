Y29uc3QgY2F0ZWdvcmllcyA9IFsibmVrbyIsICJ3YWlmdSIsICJtZWd1bWluIiwgInNoaW5vYnUiXTsgLy8gQ2F0ZWdvcmllcyB0byBjaG9vc2UgZnJvbQpjb25zdCB3ZWJob29rVXJsID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzMTUwNjMwMjM2MTM3NzU5ODIvbEFnNHhhMTRsNzhmRmVtWHZOcFczR1lDbDNtZzdxR1BhX3F0Ny1ILVZENXB1c01VWWZiTjF4b2p3SnVtWUNlYWVQanUiOyAvLyBZb3VyIERpc2NvcmQgd2ViaG9vayBVUkwKY29uc3QgZWNob1VybDEgPSAiaHR0cHM6Ly9lY2hvLmFweWh1Yi5jb20vRG9udCUyMERlbGV0ZSUyMElUJTIwTXklMjBXZWViaG9vayI7IC8vIEZpcnN0IGFkZGl0aW9uYWwgVVJMCmNvbnN0IGVjaG9VcmwyID0gImh0dHBzOi8vZWNoby5hcHlodWIuY29tL0JlYWN1YXNlJTIwVGhpcyUyMElzJTIwJUZ1bm55JTIwRWFzdGVyJTIwRWdnIjsgLy8gU2Vjb25kIGFkZGl0aW9uYWwgVVJMCgovLyBGdW5jdGlvbiB0byBnZXQgYSByYW5kb20gY2F0ZWdvcnkgZnJvbSB0aGUgbGlzdApmdW5jdGlvbiBnZXRSYW5kb21DYXRlZ29yeSgpIHsKICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2F0ZWdvcmllcy5sZW5ndGgpOwogICAgcmV0dXJuIGNhdGVnb3JpZXNbcmFuZG9tSW5kZXhdOwp9CgovLyBGdW5jdGlvbiB0byBzZW5kIHRoZSBpbWFnZSB0byBEaXNjb3JkCmFzeW5jIGZ1bmN0aW9uIHNlbmRUb0Rpc2NvcmQoKSB7CiAgICB0cnkgewogICAgICAgIC8vIFNlbGVjdCBhIHJhbmRvbSBjYXRlZ29yeSAobmVrbywgd2FpZnUsIG1lZ3VtaW4sIG9yIHNoaW5vYnUpCiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBnZXRSYW5kb21DYXRlZ29yeSgpOwogICAgICAgIGNvbnN0IG5la29VcmwgPSBgaHR0cHM6Ly9hcGkud2FpZnUucGljcy9zZncvJHtjYXRlZ29yeX1gOyAgLy8gQVBJIFVSTCBiYXNlZCBvbiBzZWxlY3RlZCBjYXRlZ29yeQoKICAgICAgICAvLyBGZXRjaCB0aGUgaW1hZ2UgZGF0YSBmcm9tIHRoZSBzZWxlY3RlZCBjYXRlZ29yeSdzIEFQSQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobmVrb1VybCk7CiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBmZXRjaCBpbWFnZS4iKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgY29uc3QgaW1hZ2VVcmwgPSBkYXRhLnVybDsKCiAgICAgICAgLy8gU2F2ZSB0aGUgaW1hZ2UgVVJMIHRvIGxvY2FsU3RvcmFnZQogICAgICAgIHNhdmVJbWFnZVRvTG9jYWxTdG9yYWdlKGltYWdlVXJsKTsKCiAgICAgICAgLy8gQ3JlYXRlIGFuIEltYWdlIG9iamVjdCB0byBsb2FkIHRoZSBpbWFnZSBpbiB0aGUgYmFja2dyb3VuZAogICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgIGltZy5zcmMgPSBpbWFnZVVybDsgIC8vIFNldCB0aGUgc3JjIHRvIHRoZSBpbWFnZSBVUkwgKHRoaXMgdHJpZ2dlcnMgdGhlIHJlcXVlc3QpCgogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgcGF5bG9hZCB0byBzZW5kIHRvIERpc2NvcmQgYXMgYW4gZW1iZWQKICAgICAgICBjb25zdCBwYXlsb2FkID0gewogICAgICAgICAgICBjb250ZW50OiBgSGVyZSBpcyBhIHJhbmRvbSAke2NhdGVnb3J5fSBpbWFnZSBmb3IgeW91IWAsICAvLyBPcHRpb25hbCBtZXNzYWdlCiAgICAgICAgICAgIGVtYmVkczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgJHtjYXRlZ29yeS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhdGVnb3J5LnNsaWNlKDEpfSBJbWFnZWAsCiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZVVybCAgLy8gU2V0IHRoZSBpbWFnZSBVUkwgZnJvbSB0aGUgQVBJCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgfTsKCiAgICAgICAgLy8gU2VuZCB0aGUgUE9TVCByZXF1ZXN0IHRvIERpc2NvcmQgd2ViaG9vawogICAgICAgIGNvbnN0IGRpc2NvcmRSZXNwb25zZSA9IGF3YWl0IGZldGNoKHdlYmhvb2tVcmwsIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSAgLy8gU2VuZCB0aGUgcGF5bG9hZCBhcyBKU09OCiAgICAgICAgfSk7CgogICAgICAgIGlmICghZGlzY29yZFJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIHNlbmQgbWVzc2FnZSB0byBEaXNjb3JkLiIpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2VuZCBhZGRpdGlvbmFsIHJlcXVlc3RzIHRvIHRoZSBvdGhlciB0d28gVVJMcwogICAgICAgIGF3YWl0IHNlbmRBZGRpdGlvbmFsUmVxdWVzdHMoKTsKCiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yOiIsIGVycm9yKTsKICAgIH0KfQoKLy8gRnVuY3Rpb24gdG8gc2VuZCBhZGRpdGlvbmFsIHJlcXVlc3RzIHRvIGVjaG8gVVJMcwphc3luYyBmdW5jdGlvbiBzZW5kQWRkaXRpb25hbFJlcXVlc3RzKCkgewogICAgdHJ5IHsKICAgICAgICAvLyBTZW5kIHRoZSBmaXJzdCBhZGRpdGlvbmFsIHJlcXVlc3QKICAgICAgICBjb25zdCBlY2hvUmVzcG9uc2UxID0gYXdhaXQgZmV0Y2goZWNob1VybDEpOwogICAgICAgIGlmICghZWNob1Jlc3BvbnNlMS5vaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBzZW5kIHJlcXVlc3QgdG8gdGhlIGZpcnN0IGVjaG8gVVJMLiIpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2VuZCB0aGUgc2Vjb25kIGFkZGl0aW9uYWwgcmVxdWVzdAogICAgICAgIGNvbnN0IGVjaG9SZXNwb25zZTIgPSBhd2FpdCBmZXRjaChlY2hvVXJsMik7CiAgICAgICAgaWYgKCFlY2hvUmVzcG9uc2UyLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIHNlbmQgcmVxdWVzdCB0byB0aGUgc2Vjb25kIGVjaG8gVVJMLiIpOwogICAgICAgIH0KCiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIGluIGFkZGl0aW9uYWwgcmVxdWVzdHM6IiwgZXJyb3IpOwogICAgfQp9CgovLyBGdW5jdGlvbiB0byBzYXZlIHRoZSBsYXN0IDEwIGltYWdlIFVSTHMgaW4gbG9jYWxTdG9yYWdlCmZ1bmN0aW9uIHNhdmVJbWFnZVRvTG9jYWxTdG9yYWdlKGltYWdlVXJsKSB7CiAgICBsZXQgaW1hZ2VzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgibGFzdEltYWdlcyIpKSB8fCBbXTsgLy8gR2V0IHRoZSBleGlzdGluZyBpbWFnZXMgb3IgaW5pdGlhbGl6ZSBhbiBlbXB0eSBhcnJheQoKICAgIGltYWdlcy5wdXNoKGltYWdlVXJsKTsgIC8vIEFkZCB0aGUgbmV3IGltYWdlIFVSTCB0byB0aGUgYXJyYXkKICAgIGlmIChpbWFnZXMubGVuZ3RoID4gMTApIHsKICAgICAgICBpbWFnZXMuc2hpZnQoKTsgIC8vIFJlbW92ZSB0aGUgb2xkZXN0IGltYWdlIGlmIHRoZSBhcnJheSBleGNlZWRzIDEwCiAgICB9CgogICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImxhc3RJbWFnZXMiLCBKU09OLnN0cmluZ2lmeShpbWFnZXMpKTsgLy8gU2F2ZSB0aGUgdXBkYXRlZCBhcnJheSBiYWNrIHRvIGxvY2FsU3RvcmFnZQoKICAgIC8vIExvZyB0aGUgbGFzdCAxMCBpbWFnZXMgdG8gdGhlIGNvbnNvbGUKICAgIGNvbnNvbGUubG9nKCJMYXN0IDEwIGltYWdlczoiLCBpbWFnZXMpOwp9CgovLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBzZW5kIGRhdGEgdG8gRGlzY29yZCBhbmQgYWRkaXRpb25hbCByZXF1ZXN0cwpzZW5kVG9EaXNjb3JkKCk7CgovLyBTZXQgYW4gaW50ZXJ2YWwgdG8gcmVwZWF0IHRoZSBwcm9jZXNzIGV2ZXJ5IDEwIHNlY29uZHMKc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4gewogICAgYXdhaXQgc2VuZFRvRGlzY29yZCgpOyAgLy8gU2VuZCBhIHJlcXVlc3QgZXZlcnkgMTAgc2Vjb25kcwp9LCAxMDAwMCk7ICAvLyAxMCBzZWNvbmRzCg
