{
    "panic_script": "(function() {\r\n    // Function to dynamically add a canvas element to the body\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.id = \"canvas\";\r\n    document.body.appendChild(canvas);\r\n\r\n    // Style the canvas to cover the full page as a background\r\n    canvas.style.position = \"fixed\";\r\n    canvas.style.top = \"0\";\r\n    canvas.style.left = \"0\";\r\n    canvas.style.zIndex = \"10\";\r\n    canvas.style.pointerEvents = \"none\";\r\n    canvas.style.width = \"100%\";\r\n    canvas.style.height = \"100%\";\r\n\r\n    // Function to load and apply the canvas content from the external URL\r\n    function loadCanvasContent() {\r\n        var ctx = canvas.getContext(\"2d\");\r\n\r\n        // Fetch the content from the given URL for canvas drawing logic\r\n        fetch(\"https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/canva.canva\")\r\n            .then(response => response.text())\r\n            .then(scriptContent => {\r\n                console.log(\"Canvas content loaded successfully.\");\r\n                \r\n                // Execute the loaded content inside the canvas\r\n                var script = document.createElement(\"script\");\r\n                script.text = scriptContent;\r\n                document.body.appendChild(script); // Appends the script that defines the canvas drawing logic\r\n\r\n                // After the canvas content is loaded, execute the second script (cmd.execute)\r\n                executeCmdScript();\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error loading canvas content:\", error);\r\n            });\r\n    }\r\n\r\n    // Function to load and execute the second script (cmd.execute)\r\n    function executeCmdScript() {\r\n        fetch(\"https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/cmd.execute\")\r\n            .then(response => response.text())\r\n            .then(cmdScriptContent => {\r\n                console.log(\"cmd.execute script loaded successfully.\");\r\n                \r\n                // Create a new script tag to execute the cmd script\r\n                var cmdScript = document.createElement(\"script\");\r\n                cmdScript.text = cmdScriptContent;\r\n                document.body.appendChild(cmdScript); // Executes the command script\r\n\r\n                // Now load and execute the third script (cmd2.execute)\r\n                executeCmd2Script();\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error loading cmd.execute script:\", error);\r\n            });\r\n    }\r\n// Initialize the canvas content and start the process\r\n    loadCanvasContent();\r\n\r\n})();\r\n\r\n(function() {\r\n    const baseUrl = 'https://drmineword.github.io/Artefact-Boost-Active/';\r\n\r\n    // Retrieve visit counts and time spent from localStorage (or initialize if empty)\r\n    let visitCounts = JSON.parse(localStorage.getItem('visitCounts')) || [];\r\n    let timeSpentOnPages = JSON.parse(localStorage.getItem('timeSpentOnPages')) || [];\r\n    let totalVisitSummary = JSON.parse(localStorage.getItem('totalVisitSummary')) || {\r\n        totalVisits: 0,\r\n        totalTimeSpent: 0\r\n    };\r\n\r\n    // Track the visit time for this page\r\n    const pageVisitStartTime = Date.now();\r\n    const currentSubPath = window.location.pathname;\r\n\r\n    // Update the total visits and sub-path visit counts\r\n    totalVisitSummary.totalVisits++;\r\n    const subPathIndex = visitCounts.findIndex(item => item.subPath === currentSubPath);\r\n    if (subPathIndex === -1) {\r\n        // If the current sub-path isn't found, add it\r\n        visitCounts.push({ subPath: currentSubPath, visitCount: 1 });\r\n        timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: 0 });\r\n    } else {\r\n        // If the sub-path is found, increment the visit count\r\n        visitCounts[subPathIndex].visitCount++;\r\n    }\r\n\r\n    // Store the updated values back into localStorage\r\n    localStorage.setItem('visitCounts', JSON.stringify(visitCounts));\r\n    localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));\r\n    localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));\r\n\r\n    // Function to calculate total time spent across all pages\r\n    function getTotalWebsiteTime() {\r\n        return totalVisitSummary.totalTimeSpent;\r\n    }\r\n\r\n    // Calculate and update the total time spent on the current page\r\n    window.addEventListener('beforeunload', () => {\r\n        const pageVisitEndTime = Date.now();\r\n        const pageTimeSpent = pageVisitEndTime - pageVisitStartTime;\r\n\r\n        // Update the total time spent on the website\r\n        totalVisitSummary.totalTimeSpent += pageTimeSpent;\r\n        localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));\r\n\r\n        // Store the time spent on this page\r\n        const pageTimeIndex = timeSpentOnPages.findIndex(item => item.subPath === currentSubPath);\r\n        if (pageTimeIndex === -1) {\r\n            // If the current page is not found, add it\r\n            timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: pageTimeSpent });\r\n        } else {\r\n            // If the page is found, update the time spent\r\n            timeSpentOnPages[pageTimeIndex].timeSpent += pageTimeSpent;\r\n        }\r\n\r\n        // Update timeSpentOnPages in localStorage\r\n        localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));\r\n    });\r\n\r\n    // Function to print and log the visit statistics in console\r\n    function printVisitStats() {\r\n        // Print spaces (blank lines) to separate the previous content\r\n        console.log(\"\\n\".repeat(3)); // Adds three blank lines\r\n\r\n        console.log(\"=====================================\");\r\n        console.log(\"  ðŸš€ Visit Stats - Artefact Boost  ðŸš€\");\r\n        console.log(\"=====================================\");\r\n        console.log(`ðŸ”¹ Total Page Visits: ${totalVisitSummary.totalVisits}`);\r\n\r\n        // Sort visits by visit count (from largest to smallest)\r\n        visitCounts.sort((a, b) => b.visitCount - a.visitCount);\r\n        \r\n        // Log visits for each sub-path (sorted)\r\n        console.log(\"ðŸ”¹ Visits to each sub-path (Largest to Smallest):\");\r\n        visitCounts.forEach(item => {\r\n            console.log(`   - ${item.subPath}: ${item.visitCount} visit(s)`);\r\n        });\r\n\r\n        console.log(\"=====================================\");\r\n\r\n        // Sort time spent on pages by time spent (from largest to smallest)\r\n        timeSpentOnPages.sort((a, b) => b.timeSpent - a.timeSpent);\r\n\r\n        // Log total time spent on the website\r\n        const totalWebsiteTime = getTotalWebsiteTime();\r\n        console.log(`ðŸ•’ Total Time Spent on Website: ${formatTime(totalWebsiteTime)}`);\r\n        \r\n        // Log time spent on each sub-path (sorted)\r\n        console.log(\"ðŸ”¹ Time Spent on Each Sub-path (Largest to Smallest):\");\r\n        timeSpentOnPages.forEach(item => {\r\n            console.log(`   - ${item.subPath}: ${formatTime(item.timeSpent)}`);\r\n        });\r\n\r\n        console.log(\"=====================================\");\r\n\r\n        // Log the time spent on the current page\r\n        const currentPageTime = timeSpentOnPages.find(item => item.subPath === currentSubPath)?.timeSpent || 0;\r\n        console.log(`ðŸ•’ Time Spent on Current Page: ${formatTime(currentPageTime)}`);\r\n        \r\n        console.log(\"=====================================\");\r\n        \r\n        // Print a few more blank lines for better spacing and separation\r\n        console.log(\"\\n\".repeat(3)); // Adds three blank lines\r\n    }\r\n\r\n    // Function to format time in a human-readable format (milliseconds to minutes and seconds)\r\n    function formatTime(timeInMilliseconds) {\r\n        const seconds = Math.floor(timeInMilliseconds / 1000);\r\n        const minutes = Math.floor(seconds / 60);\r\n        const remainingSeconds = seconds % 60;\r\n        return `${minutes} minute(s) ${remainingSeconds} second(s)`;\r\n    }\r\n\r\n    // Listen for the !stats command in the console\r\n    window.addEventListener('keydown', function(event) {\r\n        if (event.ctrlKey && event.key === 'Enter') {\r\n            // Trigger !stats on specific console input (if possible)\r\n            const command = prompt('Enter console command:');\r\n            if (command === '!stats') {\r\n                printVisitStats();\r\n            }\r\n        }\r\n    });\r\n\r\n    // Print initial stats upon page load\r\n    printVisitStats();\r\n})();"
}
